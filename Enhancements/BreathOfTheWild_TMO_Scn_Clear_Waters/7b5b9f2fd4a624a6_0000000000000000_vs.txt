#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 7b5b9f2fd4a624a6
layout(binding = 1, std140) uniform uniformBlockVS1
{
vec4 uf_blockVS1[1024];
};

layout(binding = 3, std140) uniform uniformBlockVS3
{
vec4 uf_blockVS3[1024];
};

layout(binding = 4, std140) uniform uniformBlockVS4
{
vec4 uf_blockVS4[1024];
};

layout(binding = 5, std140) uniform uniformBlockVS5
{
vec4 uf_blockVS5[1024];
};

layout(binding = 6, std140) uniform uniformBlockVS6
{
vec4 uf_blockVS6[1024];
};

layout(binding = 8, std140) uniform uniformBlockVS8
{
vec4 uf_blockVS8[1024];
};

layout(binding = 11, std140) uniform uniformBlockVS11
{
vec4 uf_blockVS11[1024];
};

layout(binding = 12, std140) uniform uniformBlockVS12
{
vec4 uf_blockVS12[1024];
};

layout(binding = 13, std140) uniform uniformBlockVS13
{
vec4 uf_blockVS13[1024];
};

uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(binding = 32) uniform sampler2DArray textureUnitVS0;// Tex0 addr 0xa9500800 res 1024x1024x8 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x8) Sampler18 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 33) uniform sampler2DArray textureUnitVS1;// Tex1 addr 0xaba63000 res 256x256x8 dim 5 tm: 4 format 001f compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x8) Sampler19 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in uvec4 attrDataSem0;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 3) out vec4 passParameterSem3;
layout(location = 4) out vec4 passParameterSem4;
layout(location = 7) out vec4 passParameterSem7;
layout(location = 9) out vec4 passParameterSem9;
layout(location = 10) out vec4 passParameterSem10;
layout(location = 6) out vec4 passParameterSem11;
layout(location = 5) out vec4 passParameterSem5;
layout(location = 8) out vec4 passParameterSem8;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R1i.y;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS3[0].w));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), uf_blockVS3[0].z));
PV0i.w = floatBitsToInt(uf_blockVS12[27].x);
// 1
PV1i.y = floatBitsToInt(uf_blockVS12[7].x);
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.w)));
R5i.w = floatBitsToInt(uf_blockVS12[7].y + 1.0);
R3i.z = floatBitsToInt(1.0 / uf_blockVS12[5].x);
PS1i = R3i.z;
// 2
R5i.z = floatBitsToInt(roundEven(intBitsToFloat(PV1i.y)));
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), uf_blockVS5[0].x));
PV0i.y = floatBitsToInt(uf_blockVS13[27].x);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS5[0].y));
// 1
R1i.y = floatBitsToInt(uf_blockVS5[0].w + intBitsToFloat(PV0i.w));
PV1i.y = R1i.y;
R0i.z = floatBitsToInt(uf_blockVS5[0].z + intBitsToFloat(PV0i.x));
PV1i.z = R0i.z;
R2i.w = floatBitsToInt(roundEven(intBitsToFloat(PV0i.y)));
R0i.x = floatBitsToInt(1.0 / uf_blockVS13[5].x);
PS1i = R0i.x;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) + -(0.5));
// 3
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
// 4
R0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.z)));
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), uf_blockVS12[26].x));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), uf_blockVS12[29].x));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS12[29].y));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS12[26].y));
// 1
R1i.x = floatBitsToInt(uf_blockVS12[29].z + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(uf_blockVS12[26].w + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(uf_blockVS12[26].z + intBitsToFloat(PV0i.x));
R1i.w = floatBitsToInt(uf_blockVS12[29].w + intBitsToFloat(PV0i.z));
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS12[28].z, intBitsToFloat(R0i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), uf_blockVS13[29].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), uf_blockVS13[29].y));
// 3
R2i.x = floatBitsToInt(uf_blockVS13[29].z + intBitsToFloat(PV0i.y));
R2i.y = floatBitsToInt(uf_blockVS13[29].w + intBitsToFloat(PV0i.w));
R9i.x = floatBitsToInt(uf_blockVS12[28].w + intBitsToFloat(PV0i.x));
R9i.x = clampFI32(R9i.x);
PS1i = R9i.x;
}
if( activeMaskStackC[1] == true ) {
R4i.xyzw = floatBitsToInt(texture(textureUnitVS1, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.w),intBitsToFloat(R1i.z))).xyzw);
R2i.xyzw = floatBitsToInt(texture(textureUnitVS1, vec3(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.w))).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(R2i.w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R2i.y));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS12[25].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS12[25].x));
PS0i = floatBitsToInt(-(intBitsToFloat(R4i.z)) + intBitsToFloat(R2i.z));
// 1
R3i.x = floatBitsToInt(uf_blockVS12[25].z + intBitsToFloat(PV0i.w));
PV1i.x = R3i.x;
R3i.y = floatBitsToInt(uf_blockVS12[25].w + intBitsToFloat(PV0i.z));
PV1i.y = R3i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R9i.x)) + intBitsToFloat(R4i.w)));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R9i.x)) + intBitsToFloat(R4i.y)));
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R9i.x)) + intBitsToFloat(R4i.z)));
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + -(uf_blockVS12[5].w));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(uf_blockVS12[5].z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(R2i.x));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x437fff00));
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(uf_blockVS13[5].z));
PS0i = R126i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R3i.z)));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x37000080));
PV1i.y = R127i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R3i.z)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R9i.x)) + intBitsToFloat(R4i.x)));
R127i.z = floatBitsToInt(intBitsToFloat(R3i.y) + -(uf_blockVS13[5].w));
PS1i = R127i.z;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), uf_blockVS12[9].y));
R2i.y = floatBitsToInt((intBitsToFloat(R127i.w) * 2.0 + -(1.0)));
R1i.z = floatBitsToInt(fract(intBitsToFloat(PV1i.y)));
PV0i.z = R1i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), uf_blockVS12[9].x));
R2i.x = R3i.x;
PS0i = R2i.x;
// 5
R5i.x = floatBitsToInt(uf_blockVS12[9].z + intBitsToFloat(PV0i.w));
R5i.y = floatBitsToInt(uf_blockVS12[9].w + intBitsToFloat(PV0i.x));
R2i.z = R3i.y;
R3i.w = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(PV0i.z)));
PV1i.w = R3i.w;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R0i.x)));
PS1i = R4i.x;
// 6
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x40c00000));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(backupReg0i)));
R0i.w = floatBitsToInt((intBitsToFloat(R127i.x) * 2.0 + -(1.0)));
// 7
R4i.z = int(intBitsToFloat(PV0i.x));
PS1i = R4i.z;
// 8
R0i.x = PS1i + 0x00000003;
R4i.y = PS1i + int(1);
R3i.z = PS1i + 0x00000005;
R4i.w = PS1i + 0x00000002;
R2i.w = PS1i + 0x00000004;
PS0i = R2i.w;
}
if( activeMaskStackC[1] == true ) {
R1i.x = floatBitsToInt(textureLod(textureUnitVS0, vec3(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z)),intBitsToFloat(R5i.w)).x);
R11i.xy = floatBitsToInt(uf_blockVS4[R3i.z].xy);
R8i.xyzw = floatBitsToInt(uf_blockVS4[R4i.z].xyzw);
R7i.xyzw = floatBitsToInt(uf_blockVS4[R4i.y].xyzw);
R6i.xyzw = floatBitsToInt(uf_blockVS4[R4i.w].xyzw);
R10i.xyzw = floatBitsToInt(uf_blockVS4[R0i.x].xyzw);
R5i.xyz = floatBitsToInt(uf_blockVS4[R2i.w].xyz);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), uf_blockVS6[38].w));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), uf_blockVS11[0].y));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), uf_blockVS6[38].w));
// 1
R12i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS6[38].x, intBitsToFloat(PV0i.x)));
R2i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS6[38].x, intBitsToFloat(PV0i.z)));
// 2
predResult = (intBitsToFloat(R9i.x) > intBitsToFloat(0x3c23d70a));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(uf_blockVS13[7].x);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), uf_blockVS13[9].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), uf_blockVS13[9].y));
R0i.w = floatBitsToInt(uf_blockVS13[7].y + 1.0);
PS0i = R0i.w;
// 1
R0i.x = floatBitsToInt(uf_blockVS13[9].z + intBitsToFloat(PV0i.z));
R0i.y = floatBitsToInt(uf_blockVS13[9].w + intBitsToFloat(PV0i.w));
R0i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.x)));
}
if( activeMaskStackC[2] == true ) {
R0i.z = floatBitsToInt(textureLod(textureUnitVS0, vec3(intBitsToFloat(R0i.x),intBitsToFloat(R0i.y),intBitsToFloat(R0i.z)),intBitsToFloat(R0i.w)).x);
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.y = floatBitsToInt(-(intBitsToFloat(R1i.x)) + intBitsToFloat(R0i.z));
// 1
backupReg0i = R1i.x;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R9i.x)) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R3i.x) * intBitsToFloat(0x3eb33333));
PV0i.y = floatBitsToInt(max(intBitsToFloat(R11i.x), intBitsToFloat(0x3727c5ac)));
PV0i.z = floatBitsToInt(intBitsToFloat(R3i.y) * intBitsToFloat(0x3eb33333));
PV0i.w = floatBitsToInt(uf_blockVS6[37].x);
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
PS0i = floatBitsToInt(uf_blockVS6[37].x * intBitsToFloat(0x3fb33333));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS11[0].y, intBitsToFloat(R1i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.w));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PS0i));
R127i.w = floatBitsToInt(intBitsToFloat(R11i.x) * intBitsToFloat(0x3dcccccd));
PV1i.w = R127i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(PV1i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), uf_blockVS11[7].w));
R9i.z = R12i.x;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.y), intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R126i.z;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R127i.z)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xbccccccd));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0xc0400000));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R127i.y)));
R9i.w = R2i.y;
PS1i = R9i.w;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R126i.z)));
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
R9i.y = R3i.w;
PS0i = R9i.y;
// 5
PV1i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.y)));
PV1i.y = floatBitsToInt(fract(intBitsToFloat(PV0i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.5);
R125i.z = clampFI32(R125i.z);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + 0.5);
PV1i.w = clampFI32(PV1i.w);
// 6
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV1i.w));
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.w = R123i.w;
// 7
R0i.x = ((intBitsToFloat(PV0i.y) > intBitsToFloat(0x3eff7cee))?int(0xFFFFFFFF):int(0x0));
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e22f983));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983));
// 8
R127i.z = floatBitsToInt(sin((intBitsToFloat(PV1i.w))/0.1591549367));
PS0i = R127i.z;
// 9
PS1i = floatBitsToInt(cos((intBitsToFloat(R126i.z))/0.1591549367));
// 10
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
// 11
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.w)));
// 12
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0xbccccccd));
// 13
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R125i.z)));
// 14
backupReg0i = R1i.y;
R1i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
R0i.w = 0x3f800000;
R0i.y = floatBitsToInt(uf_blockVS11[7].y);
PS0i = R0i.y;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
R11i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockVS1[0].x,uf_blockVS1[0].y,uf_blockVS1[0].z,uf_blockVS1[0].w)));
PV0i.x = R11i.x;
PV0i.y = R11i.x;
PV0i.z = R11i.x;
PV0i.w = R11i.x;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockVS1[1].x,uf_blockVS1[1].y,uf_blockVS1[1].z,uf_blockVS1[1].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R11i.y = tempi.x;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockVS1[2].x,uf_blockVS1[2].y,uf_blockVS1[2].z,uf_blockVS1[2].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R11i.z = tempi.x;
R0i.w = 0x3f800000;
PS0i = R0i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(PV0i.x),intBitsToFloat(PS0i)),vec4(uf_blockVS1[8].x,uf_blockVS1[8].y,uf_blockVS1[8].z,uf_blockVS1[8].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 4
backupReg0i = R0i.w;
backupReg1i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockVS1[9].x,uf_blockVS1[9].y,uf_blockVS1[9].z,uf_blockVS1[9].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = tempi.x;
R1i.y = ((backupReg1i == 0)?(PV1i.x):(PV1i.x));
PS0i = R1i.y;
// 5
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),intBitsToFloat(R0i.w)),vec4(uf_blockVS1[7].x,uf_blockVS1[7].y,uf_blockVS1[7].z,uf_blockVS1[7].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(backupReg0i));
// 6
backupReg0i = R0i.w;
backupReg1i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockVS1[10].x,uf_blockVS1[10].y,uf_blockVS1[10].z,uf_blockVS1[10].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = ((backupReg1i == 0)?(R125i.z):(PS1i));
PS0i = R1i.z;
// 7
R1i.x = ((R0i.x == 0)?(R127i.w):(R127i.w));
PV1i.x = R1i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[8].x,intBitsToFloat(R3i.x)) + uf_blockVS8[9].x));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[8].y,intBitsToFloat(R3i.x)) + uf_blockVS8[9].y));
PV1i.z = R123i.z;
R1i.w = ((R0i.x == 0)?(PV0i.x):(PV0i.x));
PV1i.w = R1i.w;
R127i.y = floatBitsToInt(-(intBitsToFloat(R1i.y)));
PS1i = R127i.y;
// 8
R0i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[8].z,intBitsToFloat(R3i.y)) + intBitsToFloat(PV1i.y)));
PV0i.x = R0i.x;
R0i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[8].w,intBitsToFloat(R3i.y)) + intBitsToFloat(PV1i.z)));
R4i.z = R1i.z;
R4i.w = PV1i.w;
R4i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.w));
R4i.x = floatBitsToInt(intBitsToFloat(R4i.x) / 2.0);
PS0i = R4i.x;
// 9
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[2].x,intBitsToFloat(PV0i.x)) + uf_blockVS8[3].x));
R4i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(R1i.w));
R4i.y = floatBitsToInt(intBitsToFloat(R4i.y) / 2.0);
R127i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[2].y,intBitsToFloat(PV0i.x)) + uf_blockVS8[3].y));
// 10
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[6].y,intBitsToFloat(R0i.x)) + uf_blockVS8[7].y));
R125i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[6].x,intBitsToFloat(R0i.x)) + uf_blockVS8[7].x));
// 11
R126i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[12].y,intBitsToFloat(R0i.x)) + uf_blockVS8[13].y));
R126i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[12].x,intBitsToFloat(R0i.x)) + uf_blockVS8[13].x));
// 12
R125i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[6].w,intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.y)));
R123i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[2].z,intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[2].w,intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.w)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[6].z,intBitsToFloat(R0i.y)) + intBitsToFloat(R125i.z)));
// 13
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[4].x,intBitsToFloat(R0i.x)) + uf_blockVS8[5].x));
R0i.z = PV0i.y;
R126i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[4].y,intBitsToFloat(R0i.x)) + uf_blockVS8[5].y));
R0i.w = PV0i.z;
PS1i = R0i.w;
// 14
backupReg0i = R127i.w;
R125i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[10].x,intBitsToFloat(R0i.x)) + uf_blockVS8[11].x));
R127i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[10].y,intBitsToFloat(R0i.x)) + uf_blockVS8[11].y));
R2i.z = backupReg0i;
PS0i = R2i.z;
// 15
R123i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[12].w,intBitsToFloat(R0i.y)) + intBitsToFloat(R126i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[12].z,intBitsToFloat(R0i.y)) + intBitsToFloat(R126i.y)));
PV1i.y = R123i.y;
R2i.w = R125i.x;
R2i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[4].z,intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.x)));
PS1i = R2i.x;
// 16
R3i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[10].z,intBitsToFloat(R0i.y)) + intBitsToFloat(R125i.z)));
R2i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[4].w,intBitsToFloat(R0i.y)) + intBitsToFloat(R126i.w)));
R3i.z = PV1i.y;
R3i.w = PV1i.x;
R3i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[10].w,intBitsToFloat(R0i.y)) + intBitsToFloat(R127i.w)));
PS0i = R3i.y;
}
// export
gl_Position = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
// export water texture details
passParameterSem0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
// export water quantity fo texture small detail
passParameterSem1 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
// export edge halo
passParameterSem2 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));
// export edge wave glow
passParameterSem3 = vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w));
// export something to do with reflections pattern
passParameterSem4 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
// export intensity of water color
passParameterSem7 = vec4(intBitsToFloat(R8i.x), intBitsToFloat(R8i.y), intBitsToFloat(R8i.z), intBitsToFloat(R8i.w))*1;
// export wave pattern
passParameterSem9 = vec4(intBitsToFloat(R9i.x), intBitsToFloat(R9i.y), intBitsToFloat(R9i.z), intBitsToFloat(R9i.w));
// export amount of foamy water also increases viewable coral 
//passParameterSem10 = vec4(intBitsToFloat(R7i.x)color, intBitsToFloat(R7i.y) color, intBitsToFloat(R7i.z) water depth, intBitsToFloat(R7i.w))
passParameterSem10 = vec4(intBitsToFloat(R7i.x)*$clarity, intBitsToFloat(R7i.y)*$clarity, intBitsToFloat(R7i.z), intBitsToFloat(R7i.w));
// export
passParameterSem11 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export intensity of halo near rocks
passParameterSem5 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.w));
// export z = the distace from the edge which the blue surface begins
passParameterSem8 = vec4(intBitsToFloat(R11i.x), intBitsToFloat(R11i.y), intBitsToFloat(R11i.z), intBitsToFloat(R11i.w));
}
