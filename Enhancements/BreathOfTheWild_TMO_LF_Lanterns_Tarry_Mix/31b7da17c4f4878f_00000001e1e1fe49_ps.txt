#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 31b7da17c4f4878f
// base color on small lamps tarry town, lanterns stables and elsewhere, goron lamps
uniform ivec4 uf_remappedPS[3];
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x336ab000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x336ad000 res 64x64x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x336bd000 res 32x32x1 dim 1 tm: 2 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem6;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem2;
R2f = passParameterSem6;
R3f = passParameterSem4;
R4f = passParameterSem5;
R5f = passParameterSem7;
R6f.xyz = (texture(textureUnitPS4, R0f.xy).xyz);
R0f.w = (texture(textureUnitPS5, R0f.xy).x);
R0f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
PV0f.x = mul_nonIEEE(R3f.z, R4f.x);
PV0f.y = mul_nonIEEE(R3f.x, R4f.y);
PV0f.z = mul_nonIEEE(R3f.y, R4f.z);
R126f.w = (R6f.x * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PV0f.w = R126f.w;
R127f.z = (R6f.y * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PS0f = R127f.z;
// 1
R127f.x = (mul_nonIEEE(-(R4f.y),R3f.z) + PV0f.z);
PV1f.y = mul_nonIEEE(PV0f.w, PV0f.w);
R126f.z = (mul_nonIEEE(-(R4f.z),R3f.x) + PV0f.x);
R127f.w = (mul_nonIEEE(-(R4f.x),R3f.y) + PV0f.y);
R127f.y = mul_nonIEEE(R4f.w, PS0f);
PS1f = R127f.y;
// 2
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(R5f.x,R5f.y,R5f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R122f.x = (mul_nonIEEE(R127f.z,R127f.z) + PV1f.y);
R122f.x = clamp(R122f.x, 0.0, 1.0);
PS0f = R122f.x;
// 3
PV1f.x = mul_nonIEEE(R127f.x, R127f.y);
PV1f.y = mul_nonIEEE(R126f.z, R127f.y);
PV1f.z = mul_nonIEEE(R127f.w, R127f.y);
R127f.w = -(PS0f) + 1.0;
PS1f = sqrt(PV0f.x);
// 4
backupReg0f = R126f.w;
R127f.x = (mul_nonIEEE(R4f.y,R126f.w) + PV1f.y);
R127f.y = (mul_nonIEEE(R4f.x,R126f.w) + PV1f.x);
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(uf_remappedPS[0].x));
R126f.w = (mul_nonIEEE(R4f.z,backupReg0f) + PV1f.z);
PS0f = 1.0 / PS1f;
// 5
R126f.x = mul_nonIEEE(R5f.x, PS0f);
PV1f.x = R126f.x;
R126f.y = mul_nonIEEE(R5f.y, PS0f);
PV1f.y = R126f.y;
R126f.z = mul_nonIEEE(R5f.z, PS0f);
R124f.w = 0.0;
PS1f = sqrt(R127f.w);
// 6
backupReg0f = R3f.x;
R3f.x = (mul_nonIEEE(backupReg0f,PS1f) + R127f.y);
PV0f.x = R3f.x;
R125f.y = (mul_nonIEEE(R3f.y,PS1f) + R127f.x);
PV0f.y = R125f.y;
R124f.z = (mul_nonIEEE(R3f.z,PS1f) + R126f.w);
PV0f.z = R124f.z;
R127f.w = PV1f.x * 1.5;
R127f.y = PV1f.y * 1.5;
PS0f = R127f.y;
// 7
backupReg0f = R126f.z;
backupReg0f = R126f.z;
tempf.x = dot(vec4(R126f.x,R126f.y,backupReg0f,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = tempf.x;
R127f.x = backupReg0f * 1.5;
PS1f = R127f.x;
// 8
R124f.x = intBitsToFloat(0x3c808081);
PV0f.y = R6f.z * intBitsToFloat(0x427f0000);
PV0f.z = mul_nonIEEE(PV1f.x, PV1f.x);
R4f.w = intBitsToFloat(uf_remappedPS[1].z);
PS0f = 1.0 / intBitsToFloat(uf_remappedPS[0].x);
// 9
backupReg0f = R127f.z;
R126f.x = mul_nonIEEE(R1f.w, PS0f);
R6f.y = floor(PV0f.y);
R6f.y *= 4.0;
R8f.z = mul_nonIEEE(R2f.x, R0f.z);
R126f.w = (PV0f.z * intBitsToFloat(0x40100000) + intBitsToFloat(0xbfa00000));
PV1f.w = R126f.w;
R127f.z = 1.0 / backupReg0f;
PS1f = R127f.z;
// 10
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(R1f.x,R1f.y,R1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = sqrt(PV1f.w);
// 11
backupReg0f = R126f.z;
backupReg1f = R126f.x;
backupReg1f = R126f.x;
R126f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), R127f.z);
R126f.y = (R126f.w >= 0.0)?1.0:0.0;
R126f.z = (1.5 * -(backupReg0f) + -(PS0f));
PV1f.z = R126f.z;
R125f.w = mul_nonIEEE(backupReg1f, backupReg1f);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 12
backupReg0f = R127f.w;
backupReg1f = R127f.y;
R125f.x = mul_nonIEEE(R1f.x, PS1f);
PV0f.x = R125f.x;
R127f.y = mul_nonIEEE(R1f.y, PS1f);
PV0f.y = R127f.y;
R125f.z = mul_nonIEEE(R1f.z, PS1f);
PV0f.z = R125f.z;
R127f.w = (mul_nonIEEE(R3f.x,PV1f.z) + backupReg0f);
R126f.w = (mul_nonIEEE(R125f.y,PV1f.z) + backupReg1f);
PS0f = R126f.w;
// 13
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(R1f.w, PV0f.x);
R123f.y = (mul_nonIEEE(R124f.z,R126f.z) + backupReg0f);
PV1f.y = R123f.y;
R126f.z = mul_nonIEEE(R1f.w, PV0f.y);
PV1f.w = -(abs(R126f.y));
R1f.z = mul_nonIEEE(R1f.w, PV0f.z);
PS1f = R1f.z;
// 14
R1f.x = intBitsToFloat(((PV1f.w >= 0.0)?(0):(floatBitsToInt(R127f.w))));
PV0f.x = R1f.x;
R1f.y = intBitsToFloat(((PV1f.w >= 0.0)?(0):(floatBitsToInt(R126f.w))));
PV0f.y = R1f.y;
R6f.z = intBitsToFloat(((PV1f.w >= 0.0)?(0):(floatBitsToInt(PV1f.y))));
PV0f.z = R6f.z;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y), R127f.z);
R3f.z = 1.0 / R125f.w;
R3f.z = clamp(R3f.z, 0.0, 1.0);
PS0f = R3f.z;
// 15
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(R127f.x,R126f.z,R1f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), R127f.z);
PS1f = R126f.w;
// 16
backupReg0f = R126f.x;
R126f.x = (mul_nonIEEE(R1f.x,PV1f.x) + -(R127f.x));
PV0f.x = R126f.x;
R126f.y = (mul_nonIEEE(R1f.y,PV1f.x) + -(R126f.z));
PV0f.y = R126f.y;
R127f.z = (mul_nonIEEE(R6f.z,PV1f.x) + -(R1f.z));
PV0f.z = R127f.z;
R1f.w = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[0].z));
R5f.x = mul_nonIEEE(R127f.w, intBitsToFloat(uf_remappedPS[0].z));
PS0f = R5f.x;
// 17
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R2f.w = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedPS[0].z));
PS1f = R2f.w;
// 18
R6f.x = dot(vec4(-(R3f.x),-(R125f.y),-(R124f.z),-(R124f.w)),vec4(R125f.x,R127f.y,R125f.z,R125f.z));
R6f.x = clamp(R6f.x, 0.0, 1.0);
PV0f.x = R6f.x;
PV0f.y = R6f.x;
PV0f.z = R6f.x;
PV0f.w = R6f.x;
PS0f = sqrt(PV1f.x);
// 19
R8f.x = mul_nonIEEE(R2f.x, R0f.x);
R8f.y = mul_nonIEEE(R2f.x, R0f.y);
R5f.z = R124f.x;
R5f.w = 1.0;
PS1f = 1.0 / PS0f;
// 20
R7f.x = (R3f.x * 0.5 + 0.5);
R5f.y = R4f.w;
R7f.z = (R124f.z * 0.5 + 0.5);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), PS1f);
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
R7f.y = (R125f.y * 0.5 + 0.5);
PS0f = R7f.y;
// 21
backupReg0f = R1f.z;
R3f.x = (mul_nonIEEE(R126f.x,PV0f.w) + R127f.x);
R0f.y = (mul_nonIEEE(R126f.y,PV0f.w) + R126f.z);
R1f.z = (mul_nonIEEE(R127f.z,PV0f.w) + backupReg0f);
R4f.w = 1.0;
R8f.w = intBitsToFloat(0x3b808081);
PS1f = R8f.w;
// 0
backupReg0f = R0f.y;
backupReg0f = R0f.y;
tempf.x = dot(vec4(R3f.x,backupReg0f,R1f.z,-0.0),vec4(R3f.x,backupReg0f,R1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R7f.w = (R6f.y * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081));
PS0f = R7f.w;
// 1
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
backupReg0f = R0f.y;
PV0f.x = mul_nonIEEE(R3f.x, PS1f);
PV0f.y = mul_nonIEEE(backupReg0f, PS1f);
PV0f.z = mul_nonIEEE(R1f.z, PS1f);
// 3
tempf.x = dot(vec4(R1f.x,R1f.y,R6f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 4
PV0f.y = mul_nonIEEE(PV1f.x, PV1f.x);
// 5
PV1f.x = mul_nonIEEE(PV0f.y, PV0f.y);
// 6
PV0f.w = mul_nonIEEE(PV1f.x, PV1f.x);
// 7
R123f.z = (mul_nonIEEE(PV0f.w,-(intBitsToFloat(uf_remappedPS[0].y))) + PV0f.w);
PV1f.z = R123f.z;
// 8
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),R6f.x) + PV1f.z);
PV0f.y = R123f.y;
// 9
PV1f.x = mul_nonIEEE(R3f.z, PV0f.y);
// 10
PV0f.y = mul_nonIEEE(R0f.w, PV1f.x);
// 11
R4f.x = mul_nonIEEE(R1f.w, PV0f.y);
PV1f.x = R4f.x;
R4f.y = mul_nonIEEE(R5f.x, PV0f.y);
PV1f.y = R4f.y;
R4f.z = mul_nonIEEE(R2f.w, PV0f.y);
PV1f.z = R4f.z;
// 12
R3f.xyz = vec3(PV1f.x,PV1f.y,PV1f.z);
R3f.w = R4f.w;
// 13
R2f.xyz = vec3(R7f.x,R7f.y,R7f.z);
R2f.w = R7f.w;
// 14
R1f.xyz = vec3(R8f.x,R8f.y,R8f.z);
R1f.w = R8f.w;
// 15
R0f.xyz = vec3(R5f.z,R5f.y,R5f.z);
R0f.w = R5f.w;
// export
// passPixelColor0 = vec4(R0f.x*$Red, R0f.y*$Green, R0f.z*$Blue, R0f.w)*$Bright;
// passPixelColor1 = vec4(R1f.x*$Red, R1f.y*$Green, R1f.z*$Blue, R1f.w)*$Bright;
// passPixelColor3 = vec4(R2f.x*$Red, R2f.y*$Green, R2f.z*$Blue, R2f.w)*$Bright;
// passPixelColor5 = vec4(R3f.x*$Red, R3f.y*$Green, R3f.z*$Blue, R3f.w)*$Bright;


passPixelColor5 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);

/*check if we want to change a color*/
if ($Red != 256 || $Green != 256 || $Blue != 256)
{

	/*Normalize RGB (255,255,255) => RGB (1,1,1) system*/
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;
	
	
/* 5 */
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor5.rgb, vec3(0.2126, 0.7152, 0.0722));

	/*Adjust brightness of greyscale*/
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor5 = vec4(luma*rred, luma*ggreen, luma*bblue, R3f.w*$Bright);
	
/* 1  */	
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/*Adjust brightness of greyscale*/
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor5 = vec4(R3f.x, R3f.y, R3f.z, R3f.w)*$Bright;
	passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}


passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor3 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// passPixelColor5 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
