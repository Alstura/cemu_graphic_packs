#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader e42ea266ae42732c
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 3) uniform sampler2DArray textureUnitPS3;// Tex3 addr 0xac444000 res 256x128x2 dim 5 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x2) Sampler3 ClampX/Y/Z: 1 1 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
// 0
PV0i.x = uf_remappedPS[0].x;
R5i.y = floatBitsToInt((-(intBitsToFloat(R1i.y)) * 2.0 + 1.0));
R5i.y = clampFI32(R5i.y);
PV0i.z = floatBitsToInt(-(intBitsToFloat(R1i.y)) + 1.0);
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R1i.w = ((0.0 > intBitsToFloat(R0i.y))?int(0xFFFFFFFF):int(0x0));
R6i.y = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R4i.x));
PS0i = R6i.y;
// 1
R5i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(1.0));
R7i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)) + intBitsToFloat(R4i.y));
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.x)));
R0i.w = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(R4i.z));
R8i.y = floatBitsToInt(intBitsToFloat(R0i.x) * intBitsToFloat(0x3f933333));
PS1i = R8i.y;
R9i.yw = floatBitsToInt(texture(textureUnitPS3, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z))).yw);
// 0
backupReg0i = R0i.z;
backupReg0i = R0i.z;
R127i.x = floatBitsToInt(intBitsToFloat(R0i.y) * intBitsToFloat(0x3f733333));
R127i.y = floatBitsToInt(intBitsToFloat(R5i.y) * intBitsToFloat(0x41990000));
PV0i.z = floatBitsToInt(intBitsToFloat(R9i.y) + intBitsToFloat(0xbdb851ec));
PV0i.w = floatBitsToInt(min(intBitsToFloat(R4i.w), intBitsToFloat(R5i.x)));
PV0i.w = clampFI32(PV0i.w);
R126i.z = ((R1i.w == 0)?(backupReg0i):(backupReg0i));
PS0i = R126i.z;
// 1
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.x))/2.0);
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.y))/2.0);
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.z))/2.0);
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x3dcccccd) + intBitsToFloat(0x3db851ec)));
PV1i.w = R123i.w;
PS1i = 0x3c808081;
// 2
backupReg0i = R127i.x;
R127i.x = ((R1i.w == 0)?(R0i.y):(backupReg0i));
R125i.y = ((R1i.w == 0)?(R0i.x):(R8i.y));
PV0i.z = uf_remappedPS[1].z;
R123i.w = ((R1i.w == 0)?(R9i.y):(PV1i.w));
PV0i.w = R123i.w;
R1i.x = PS1i;
PS0i = R1i.x;
// 3
R125i.x = floatBitsToInt(floor(intBitsToFloat(R127i.y)));
R125i.x = floatBitsToInt(intBitsToFloat(R125i.x) * 4.0);
R123i.y = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(0x41000000) + intBitsToFloat(0xbda3d70a)));
PV1i.y = R123i.y;
R9i.z = floatBitsToInt(intBitsToFloat(R127i.z) + 0.5);
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(R9i.w)));
R1i.y = PV0i.z;
PS1i = R1i.y;
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.y), intBitsToFloat(0x3f4ccccd)));
PV0i.x = clampFI32(PV0i.x);
R9i.y = floatBitsToInt(intBitsToFloat(R126i.y) + 0.5);
R0i.w = 0;
R9i.x = floatBitsToInt(intBitsToFloat(R126i.x) + 0.5);
PS0i = R9i.x;
// 5
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PV0i.x)) + intBitsToFloat(R2i.x)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R2i.y)));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV0i.x)) + intBitsToFloat(R2i.z)));
R9i.w = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(0x3b808081));
PV1i.w = R9i.w;
// 6
R4i.xyz = ivec3(R9i.x,R9i.y,R9i.z);
R4i.w = PV1i.w;
// 7
R3i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R3i.w = R0i.w;
// 8
R2i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R2i.w = R1i.w;
// export
if( ((vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w))).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
passPixelColor1 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor3 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));


/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R3i.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w))*$Bright;
}
}
