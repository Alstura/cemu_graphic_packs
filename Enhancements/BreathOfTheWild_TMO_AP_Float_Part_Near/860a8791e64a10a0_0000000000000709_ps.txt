#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 860a8791e64a10a0
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2082b000 res 32x32x1 dim 1 tm: 2 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x2082d000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0xf557c800 res 160x90x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem8;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem8;
R1f.w = (texture(textureUnitPS1, R4f.zw).w);
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
// 0
backupReg0f = R4f.y;
PV0f.x = mul_nonIEEE(R4f.w, R1f.w);
R4f.y = R4f.z * 1.0;
R3f.z = backupReg0f * 1.0;
R1f.w = R4f.x * 1.0;
PS0f = 1.0 / R2f.w;
// 1
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = mul_nonIEEE(backupReg0f, PS0f);
R2f.y = mul_nonIEEE(backupReg1f, PS0f);
R4f.z = mul_nonIEEE(R0f.w, PV0f.x);
R4f.z = clamp(R4f.z, 0.0, 1.0);
R2f.w = R0f.x + -(R1f.x);
R2f.z = R0f.y + -(R1f.y);
PS1f = R2f.z;
R5f.z = (texture(textureUnitPS9, R2f.xy).x);
// 0
R123f.x = (mul_nonIEEE(R2f.w,R1f.w) + R1f.x);
PV0f.x = R123f.x;
PV0f.y = R0f.z + -(R1f.z);
R127f.z = mul_nonIEEE(R3f.x, R4f.z);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(uf_remappedPS[0].w));
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(uf_remappedPS[0].w));
PS0f = R127f.x;
// 1
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[0].w));
R123f.z = (mul_nonIEEE(PV0f.y,R4f.y) + R1f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.z,R3f.z) + R1f.y);
PV1f.w = R123f.w;
R1f.x = mul_nonIEEE(PV0f.x, PV0f.w);
PS1f = R1f.x;
// 2
R1f.y = mul_nonIEEE(PV1f.w, R127f.x);
PV0f.z = R5f.z;
PV0f.z /= 2.0;
PV0f.z = clamp(PV0f.z, 0.0, 1.0);
R1f.z = mul_nonIEEE(PV1f.z, PV1f.x);
PS0f = R1f.z;
// 3
R1f.w = mul_nonIEEE(R127f.z, PV0f.z);
// export edit here *64 is praticle brightness
 if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w*64)).a > uf_alphaTestRef) == false) discard;
// passPixelColor0 = vec4(R1f.x*$Red, R1f.y*$Green, R1f.z*$Blue, R1f.w*$Bright);
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);

// check if we want to change a color
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	// Adjust brightness of greyscale
	luma = luma*$Bright;
	 
	// Normalize RGB (255,255,255) => RGB (1,1,1) system
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright)*4;
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}
}
