#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 2e5ccd514004644d
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20e36000 res 256x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x20e36000 res 256x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x20ea5000 res 64x64x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem8;
layout(location = 5) in vec4 passParameterSem9;
layout(location = 6) in vec4 passParameterSem14;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem8;
R5f = passParameterSem9;
R6f = passParameterSem14;
R7f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R4f.xyzw = (texture(textureUnitPS1, R4f.zw).xyzw);
R5f.xyzw = (texture(textureUnitPS2, R5f.xy).xyzw);
// 0
PV0f.x = mul_nonIEEE(R4f.x, R4f.x);
R127f.y = mul_nonIEEE(R4f.y, R4f.y);
R127f.z = mul_nonIEEE(R4f.z, R4f.z);
R127f.w = R7f.w + R4f.w;
PS0f = 1.0 / R2f.w;
// 1
R4f.x = mul_nonIEEE(R2f.x, PS0f);
R4f.y = mul_nonIEEE(R2f.y, PS0f);
R4f.z = (mul_nonIEEE(R7f.x,R7f.x) + PV0f.x);
PV1f.w = -(R5f.w) + 1.0;
PS1f = 1.0 / R2f.w;
// 2
backupReg0f = R2f.z;
R2f.x = R127f.w + -(PV1f.w);
R2f.y = (mul_nonIEEE(R7f.y,R7f.y) + R127f.y);
R2f.z = (mul_nonIEEE(R7f.z,R7f.z) + R127f.z);
R2f.w = backupReg0f * PS1f;
R7f.w = 1.0 / intBitsToFloat(uf_remappedPS[0].y);
PS0f = R7f.w;
R4f.x = (texture(textureUnitPS4, R4f.xy).x);
// 0
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),R4f.x) + intBitsToFloat(uf_remappedPS[1].x));
R123f.y = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[1].w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
PV0f.y = R123f.y;
PV0f.z = -(R0f.w) + R2f.x;
PV0f.w = mul_nonIEEE(R5f.x, R5f.x);
PS0f = mul_nonIEEE(R5f.y, R5f.y);
// 1
R126f.x = mul_nonIEEE(R4f.z, PV0f.w);
PV1f.y = mul_nonIEEE(R5f.z, R5f.z);
R127f.z = mul_nonIEEE(R1f.w, PV0f.z);
R127f.z = clamp(R127f.z, 0.0, 1.0);
R127f.w = mul_nonIEEE(R2f.y, PS0f);
PS1f = 1.0 / PV0f.y;
// 2
backupReg0f = R0f.x;
backupReg1f = R0f.z;
PV0f.x = R0f.y + -(R1f.y);
PV0f.y = mul_nonIEEE(R2f.z, PV1f.y);
PV0f.z = backupReg0f + -(R1f.x);
PV0f.w = -(intBitsToFloat(uf_remappedPS[1].z)) * PS1f;
PS0f = backupReg1f + -(R1f.z);
// 3
backupReg0f = R1f.y;
backupReg1f = R1f.z;
backupReg2f = R1f.x;
PV1f.x = -(PV0f.w) + R127f.x;
R1f.y = (mul_nonIEEE(PV0f.x,R127f.w) + backupReg0f);
R1f.z = (mul_nonIEEE(PS0f,PV0f.y) + backupReg1f);
R1f.x = (mul_nonIEEE(PV0f.z,R126f.x) + backupReg2f);
PS1f = R1f.x;
// 4
PV0f.z = PV1f.x * R7f.w;
PV0f.z = clamp(PV0f.z, 0.0, 1.0);
// 5
PV1f.y = mul_nonIEEE(R127f.z, PV0f.z);
// 6
PV0f.x = mul_nonIEEE(R3f.x, PV1f.y);
// 7
R1f.w = mul_nonIEEE(R6f.w, PV0f.x);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);


/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}

}
