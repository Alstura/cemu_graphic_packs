#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 7f39f0470fc4928a
// tall grass patches, scales whole patch, blades spread further apart
// controls patch motion
//
uniform ivec4 uf_remappedVS[22];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(binding = 32) uniform sampler2D textureUnitVS0;// Tex0 addr 0x433d7000 res 256x256x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler18 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 33) uniform sampler2D textureUnitVS1;// Tex1 addr 0x4322f000 res 256x256x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler19 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 34) uniform sampler2D textureUnitVS2;// Tex2 addr 0x4328f800 res 512x512x1 dim 1 tm: 1 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler20 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 35) uniform sampler2D textureUnitVS3;// Tex3 addr 0x4313c000 res 128x128x1 dim 1 tm: 4 format 001f compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler21 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 36) uniform sampler2D textureUnitVS4;// Tex4 addr 0x4315c800 res 128x128x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler22 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 37) uniform sampler2D textureUnitVS5;// Tex5 addr 0x408da800 res 320x64x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler23 ClampX/Y/Z: 1 1 2 border: 0
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 3) out vec4 passParameterSem3;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 1) out vec4 passParameterSem1;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem0.xy)/255.0);
attrDecoder.zw = uvec2(0);
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xy = attrDataSem1.xy;
if( (attrDecoder.x&0x80) != 0 ) attrDecoder.x |= 0xFFFFFF00;
if( (attrDecoder.y&0x80) != 0 ) attrDecoder.y |= 0xFFFFFF00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/127.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/127.0,-1.0));
attrDecoder.zw = uvec2(0);
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem2.xy));
attrDecoder.zw = uvec2(0);
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem8.xy)/255.0);
attrDecoder.zw = uvec2(0);
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
// 0
// scales size of patch
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(uf_remappedVS[0].y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(uf_remappedVS[0].x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(uf_remappedVS[1].y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(uf_remappedVS[1].x)));
R127i.x = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(0x3e65a5dd));
PS0i = R127i.x;
// 1
// more scaling
R7i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].z) + intBitsToFloat(PV0i.w));
R7i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].w) + intBitsToFloat(PV0i.z));
R3i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[0].z) + intBitsToFloat(PV0i.y));
// amount the grass reacts to characters standing on it
// PV1i.z = R3i.z * 2; // grass stays straight up when standing
// uses integers
PV1i.z = R3i.z ;
// R5i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[0].w) + intBitsToFloat(PV0i.x)*2); // spacing of grass
R5i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[0].w) + intBitsToFloat(PV0i.x));
PV1i.w = R5i.w;
R1i.w = 0x3f800000;
PS1i = R1i.w;
// 2
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_remappedVS[2].y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_remappedVS[3].z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_remappedVS[2].x)));
// How close together waves of grass roll in the wind
// PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[3].w)*1.5 * intBitsToFloat(0x43c9d6c7));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[3].w) * intBitsToFloat(0x43c9d6c7));
// randomness of grass blade movement when blown in the wind
// R125i.z = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(uf_remappedVS[3].w)*.6);
R125i.z = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(uf_remappedVS[3].w));
PS0i = R125i.z;
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedVS[4].y)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedVS[3].y)));
// more grass wave speed seems to stiffen the bone structure
// R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.w)*2);
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.w));
PV1i.z = R126i.z;
// stiffness - integers
R0i.w = uf_remappedVS[3].x;
// springy-ness - integers
R5i.y = uf_remappedVS[3].x;
PS1i = R5i.y;
// 4
R4i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[2].z) + intBitsToFloat(R127i.z));
R4i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[2].w) + intBitsToFloat(R126i.x));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedVS[5].x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedVS[5].y)));
PS0i = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.z));
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(R127i.x)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(PS0i));
R0i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[5].z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedVS[4].z)));
R0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[5].w) + intBitsToFloat(PV0i.w));
PS1i = R0i.y;
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedVS[6].x)));
R8i.y = floatBitsToInt(intBitsToFloat(R125i.z) * intBitsToFloat(0x439d1463));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedVS[6].y)));
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3cb6a401));
PS0i = R0i.x;
// 7
R6i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[6].z) + intBitsToFloat(PV0i.x));
R6i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[6].w) + intBitsToFloat(PV0i.w));
R5i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3cb6a401));
R2i.w = R3i.z;
R1i.z = R5i.w;
PS1i = R1i.z;
R9i.xyzw = floatBitsToInt(texture(textureUnitVS3, intBitsToFloat(R7i.xy)).xyzw);
R4i.xy = floatBitsToInt(texture(textureUnitVS0, intBitsToFloat(R4i.xy)).xy);
R10i.xy = floatBitsToInt(texture(textureUnitVS2, intBitsToFloat(R0i.zy)).zw);
R0i.x = floatBitsToInt(texture(textureUnitVS5, intBitsToFloat(R0i.xw)).x);
R5i.x = floatBitsToInt(texture(textureUnitVS5, intBitsToFloat(R5i.zy)).x);
R6i.xy = floatBitsToInt(texture(textureUnitVS1, intBitsToFloat(R6i.xy)).xy);
R7i.yzw = floatBitsToInt(texture(textureUnitVS4, intBitsToFloat(R7i.xy)).xyz);
// 0
backupReg0i = R8i.y;
PV0i.x = R8i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 4.0);
R8i.y = floatBitsToInt(intBitsToFloat(R9i.z) * intBitsToFloat(0x44480000));
PV0i.y = R8i.y;
R125i.z = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(uf_remappedVS[7].x)));
R127i.w = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(uf_remappedVS[7].z)));
R122i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x3e22f983) + 0.5));
PS0i = R122i.x;
// 1
R127i.x = floatBitsToInt(fract(intBitsToFloat(PS0i)));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(uf_remappedVS[7].y)));
R127i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[3].x)) + 1.0);
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PV1i.w = R123i.w;
R126i.y = R4i.y;
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) * 2.0);
PS1i = R126i.y;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.w),intBitsToFloat(R8i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = floatBitsToInt(fract(intBitsToFloat(PV1i.w)));
PS0i = R126i.z;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.z),intBitsToFloat(R127i.y),intBitsToFloat(R127i.w),-0.0),vec4(intBitsToFloat(R125i.z),intBitsToFloat(R127i.y),intBitsToFloat(R127i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
// 4
backupReg0i = R127i.z;
R123i.x = floatBitsToInt((intBitsToFloat(R126i.z) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3f4ccccd));
PV0i.y = clampFI32(PV0i.y);
R127i.z = floatBitsToInt(min(intBitsToFloat(uf_remappedVS[3].x), intBitsToFloat(backupReg0i)));
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
R127i.z = clampFI32(R127i.z);
R123i.w = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.w = R123i.w;
R7i.x = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R7i.x;
// 5
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PV1i.y = floatBitsToInt(-(intBitsToFloat(PS0i)) + intBitsToFloat(0x40f00000));
R126i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[3].x) + intBitsToFloat(0xbe99999a));
R126i.z = clampFI32(R126i.z);
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983));
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e22f983));
PS1i = R125i.z;
// 6
R127i.x = floatBitsToInt(intBitsToFloat(R126i.y) + -(1.0));
R126i.y = R10i.y;
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) / 2.0);
PV0i.z = R4i.x;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedVS[9].w)));
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3de38e39));
R126i.x = clampFI32(R126i.x);
PS0i = R126i.x;
// 7
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y)));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(0x3ca3d70a));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + -(1.0));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x3d6a0fd3));
PS1i = floatBitsToInt(sin((intBitsToFloat(R127i.w))/0.1591549367));
// 8
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R125i.z;
R127i.x = floatBitsToInt(-(intBitsToFloat(backupReg0i)));
R126i.y = floatBitsToInt(-(intBitsToFloat(R126i.w)) + 1.0);
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PS1i)));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + 0.5);
PS0i = floatBitsToInt(sin((intBitsToFloat(backupReg2i))/0.1591549367));
// 9
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
R127i.y = backupReg0i;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 2.0);
R126i.z = R2i.y;
R126i.z = floatBitsToInt(intBitsToFloat(R126i.z) / 2.0);
PV1i.w = floatBitsToInt(-(intBitsToFloat(R126i.x)) + 1.0);
R125i.y = R5i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) * 2.0);
PS1i = R125i.y;
// 10
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R126i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R126i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.w)));
PV0i.z = floatBitsToInt(max(intBitsToFloat(backupReg1i), intBitsToFloat(PV1i.w)));
R126i.w = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(R125i.x)));
// 11
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(uf_remappedVS[9].y)));
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(0x3f400000));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), intBitsToFloat(R127i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), intBitsToFloat(R125i.y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PV0i.z)));
PS1i = R127i.y;
// 12
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R126i.y)));
R125i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.z));
PV0i.y = R125i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.w));
// 13
backupReg0i = R127i.y;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_remappedVS[10].z)));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.w)));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedVS[10].x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_remappedVS[10].w)));
PS1i = R126i.z;
// 14
R125i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(uf_remappedVS[10].y)));
PV0i.z = R3i.x;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
PV0i.w = R3i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R125i.y = PV1i.z;
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) / 2.0);
PS0i = R125i.y;
// 15
PV1i.x = floatBitsToInt(-(intBitsToFloat(R127i.y)) + 1.0);
PV1i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[9].z) + intBitsToFloat(0xbf1eb852));
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV0i.y));
R0i.w = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV0i.w));
PS1i = R2i.y;
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(R125i.y) + intBitsToFloat(0x38d1b717));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R10i.y)) + intBitsToFloat(0x3f1eb852)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(R125i.x)));
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(0x3e4ccccd)));
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(PV1i.z)));
PS0i = R125i.x;
// 17
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.x)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.w)));
PV1i.y = R125i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PV0i.x)));
PV1i.z = R126i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.z)), intBitsToFloat(PV0i.y)));
PS1i = PV0i.z;
// 18
R3i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(PS1i));
R3i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(PV1i.w));
PV0i.z = R125i.x;
PV0i.w = floatBitsToInt(intBitsToFloat(PS1i) * 1.5);
PS0i = floatBitsToInt(intBitsToFloat(PV1i.w) * 1.5);
// 19
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * 1.5);
R6i.y = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV0i.w));
R0i.z = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.z));
PV1i.z = R0i.z;
R3i.w = floatBitsToInt(intBitsToFloat(R125i.y) + intBitsToFloat(PS0i));
R1i.w = floatBitsToInt(intBitsToFloat(R127i.z) * 1.5);
PS1i = R1i.w;
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R5i.z = tempi.x;
R2i.z = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV1i.x));
PS0i = R2i.z;
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R9i.w)) + 2.0);
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
R127i.y = ((intBitsToFloat(R1i.y) > 2.0)?int(0xFFFFFFFF):int(0x0));
R127i.z = ((intBitsToFloat(R1i.y) > 0.0)?int(0xFFFFFFFF):int(0x0));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(uf_remappedVS[9].x)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R5i.z));
PS0i = floatBitsToInt(tempResultf);
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R4i.y = 0x3f800000;
R126i.z = 0x3f800000;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
R124i.y = floatBitsToInt((intBitsToFloat(R9i.x) * 2.0 + -(1.0)));
PS1i = R124i.y;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.y),intBitsToFloat(R3i.w),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R6i.y),intBitsToFloat(R3i.w),intBitsToFloat(R2i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV1i.x)));
// 3
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(backupReg0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(backupReg0i)));
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(0x38d1b717));
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PS0i));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
backupReg0i = R0i.w;
R125i.x = ((R127i.z == 0)?(R2i.w):(PV1i.w));
R125i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R2i.y)), intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV1i.y));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.z)));
PS0i = R126i.x;
// 5
backupReg0i = R6i.y;
backupReg1i = R127i.x;
R127i.x = ((R127i.z == 0)?(R1i.z):(PV0i.w));
PV1i.x = R127i.x;
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.z)));
PV1i.y = R6i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(R8i.y) + intBitsToFloat(backupReg1i));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV0i.z)));
PV1i.w = R124i.w;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.z)));
PS1i = R124i.x;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.x));
R126i.y = ((R127i.z == 0)?(R8i.y):(PV1i.z));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(R125i.x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R125i.y)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R126i.x)));
// 7
PV1i.x = floatBitsToInt(-(intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R126i.x)) + intBitsToFloat(PS0i));
R123i.z = ((R127i.y == 0)?(R127i.x):(PV0i.x));
PV1i.z = R123i.z;
R123i.w = ((R127i.y == 0)?(R125i.x):(PV0i.z));
PV1i.w = R123i.w;
R125i.x = floatBitsToInt((intBitsToFloat(R9i.y) * 2.0 + -(1.0)));
PS1i = R125i.x;
// 8
// scale individual blades
// scale x
// R127i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.x)*1.2);
R127i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.x));
// scale height
// PV0i.y = floatBitsToInt(intBitsToFloat(R124i.x)*1.5 + intBitsToFloat(R126i.y));
PV0i.y = floatBitsToInt(intBitsToFloat(R124i.x)*$Bright + intBitsToFloat(R126i.y));
R127i.z = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R124i.y)));
PS0i = floatBitsToInt(intBitsToFloat(uf_remappedVS[11].x) + -(1.0));
// 9
backupReg0i = R127i.y;
// R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R125i.x))*8 + intBitsToFloat(PV0i.w))); //change the brightness of the smashed grass underfoot
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.w)));
R126i.x = clampFI32(R126i.x);
R127i.y = ((backupReg0i == 0)?(R126i.y):(PV0i.y));
PV1i.y = R127i.y;
// R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R7i.x)),intBitsToFloat(uf_remappedVS[11].y)) + intBitsToFloat(uf_remappedVS[11].x)*8)); // darken most grass
// Color changing of near grass. multiply to flatten the color out since
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R7i.x)),intBitsToFloat(uf_remappedVS[11].y)) + intBitsToFloat(uf_remappedVS[11].x)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(0x3eaaaaab));
R126i.w = clampFI32(R126i.w);
// PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i)*8); // close grass darkens
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i)*.8);

// Build R9i.xyz
// 10
R9i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(PV1i.y),intBitsToFloat(R127i.z),intBitsToFloat(R4i.y)),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].w))));
// PV0i.x = R9i.x;
// PV0i.y = R9i.x;
// PV0i.z = R9i.x;
// PV0i.w = R9i.x;
// R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PS1i)) + -(intBitsToFloat(PS1i)*8))); // Change the brightness of the darker/lower part of the blade
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PS1i)) + -(intBitsToFloat(PS1i))));
R7i.x = clampFI32(R7i.x);
PS0i = R7i.x;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R4i.y)),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].w))));
// PV1i.x = tempi.x;
// PV1i.y = tempi.x;
// PV1i.z = tempi.x;
// PV1i.w = tempi.x;
R9i.y = tempi.x;
R127i.w = R124i.y;
PS1i = R127i.w;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R4i.y)),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].w))));
PV0i.x = tempi.x;
// PV0i.y = tempi.x;
// PV0i.z = tempi.x;
// PV0i.w = tempi.x;
R9i.z = tempi.x;
R125i.w = floatBitsToInt(-(intBitsToFloat(R126i.x)) + 1.0);
PS0i = R125i.w;
// R9i built



// R4i.xyzw build
// 13
backupReg0i = R126i.w;
R4i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(PV0i.x),intBitsToFloat(R126i.z)),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),intBitsToFloat(uf_remappedVS[15].w))));
// PV1i.x = R4i.x;
// PV1i.y = R4i.x;
// PV1i.z = R4i.x;
// PV1i.w = R4i.x;
// Intensity of shimmer of alternate green and blade color variation
// R126i.w = floatBitsToInt(intBitsToFloat(0x3e99999a) * intBitsToFloat(backupReg0i)*8);
R126i.w = floatBitsToInt(intBitsToFloat(0x3e99999a) * intBitsToFloat(backupReg0i));
PS1i = R126i.w;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),intBitsToFloat(R126i.z)),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].w))));
// PV0i.x = tempi.x;
// PV0i.y = tempi.x;
// PV0i.z = tempi.x;
// PV0i.w = tempi.x;
R4i.y = tempi.x;
// R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R6i.y)*Brightness of alt color blades) + intBitsToFloat(R127i.w)*Concentration of alt color patch)*Size of alt color patches);
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R6i.y)) + intBitsToFloat(R127i.w)));
PS0i = R127i.x;
// 15 determine what masks over and under grass
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),intBitsToFloat(R126i.z)),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].w))));
// PV1i.x = tempi.x;
// PV1i.y = tempi.x;
// PV1i.z = tempi.x;
// PV1i.w = tempi.x;
R4i.z = tempi.x;
// makes color variation in the grass at distances from the camera
// can mak flat colored grass
// PS1i = floatBitsToInt(sqrt(intBitsToFloat(R125i.w))*8);
PS1i = floatBitsToInt(sqrt(intBitsToFloat(R125i.w)));
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),intBitsToFloat(R126i.z)),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].w))));
// PV0i.x = tempi.x;
// PV0i.y = tempi.x;
PV0i.z = tempi.x;
// PV0i.w = tempi.x;
R4i.w = tempi.x;
// R4i.xyzw built


R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R124i.x)) + intBitsToFloat(PS1i)));
PS0i = R126i.z;
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[12].x)));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R10i.x)) + intBitsToFloat(0xbdc0b780)));
PV1i.z = R125i.x;
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[13].x)));
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R10i.x)) + intBitsToFloat(0xbe50e560)));
PS1i = R3i.x;
// 18
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.w),intBitsToFloat(R10i.x)) + intBitsToFloat(0xbd009d49)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[14].x)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedVS[12].y)) + intBitsToFloat(PV1i.x)));
R8i.x = R1i.x;
R8i.x = floatBitsToInt(intBitsToFloat(R8i.x) / 2.0);
PS0i = R8i.x;
// 19
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedVS[13].y)) + intBitsToFloat(R125i.w)));
PV1i.x = R123i.x;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedVS[14].y)) + intBitsToFloat(PV0i.z)));
R7i.z = R10i.y;
R10i.w = floatBitsToInt((intBitsToFloat(R10i.x) * 4.0 + -(1.0)));
R10i.w = clampFI32(R10i.w);
R8i.y = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(0xbeaaaa3b) + 1.0));
PS1i = R8i.y;


// 20
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedVS[12].z)) + intBitsToFloat(R126i.w)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedVS[13].z)) + intBitsToFloat(PV1i.x)));
// 21
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedVS[14].z)) + intBitsToFloat(R124i.y)));
// export
gl_Position = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
// export
// skipped export to semanticId 255
// 0
R10i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),-(intBitsToFloat(uf_remappedVS[19].y))) + intBitsToFloat(R6i.y)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R7i.x)) + intBitsToFloat(uf_remappedVS[20].w));
PV0i.y = clampFI32(PV0i.y);
R10i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),-(intBitsToFloat(uf_remappedVS[19].y))) + intBitsToFloat(R3i.x)));
PS0i = R10i.y;
// 1
R10i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),-(intBitsToFloat(uf_remappedVS[19].y))) + intBitsToFloat(R0i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),-(intBitsToFloat(uf_remappedVS[19].y))) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
// 3
R7i.w = PV0i.x;
// export
passParameterSem0 = vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w));
// export
passParameterSem2 = vec4(intBitsToFloat(R7i.z), intBitsToFloat(R7i.y), intBitsToFloat(R7i.y), intBitsToFloat(R7i.w));
// 0
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(uf_remappedVS[21].y)) + intBitsToFloat(uf_remappedVS[21].w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedVS[21].x)) + intBitsToFloat(uf_remappedVS[21].z)));
PV0i.z = R123i.z;
// 1
R8i.z = PV0i.z;
R8i.w = PV0i.y;
// export
passParameterSem1 = vec4(intBitsToFloat(R8i.x), intBitsToFloat(R8i.y), intBitsToFloat(R8i.z), intBitsToFloat(R8i.w));
}
