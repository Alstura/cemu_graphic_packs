#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader cc76e8d2d20f14f6
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20d72000 res 32x32x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem7;
layout(location = 4) in vec4 passParameterSem8;
layout(location = 5) in vec4 passParameterSem14;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
R2f = passParameterSem4;
R3f = passParameterSem7;
R4f = passParameterSem8;
R5f = passParameterSem14;
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
backupReg2f = R0f.z;
PV0f.x = R4f.w * 1.0;
PV0f.y = mul_nonIEEE(backupReg0f, R4f.y);
PV0f.z = mul_nonIEEE(backupReg1f, R4f.x);
R127f.w = mul_nonIEEE(backupReg2f, R4f.z);
PS0f = 1.0 / R1f.w;
// 1
R4f.x = mul_nonIEEE(R3f.x, PV0f.z);
R4f.y = mul_nonIEEE(R3f.y, PV0f.y);
R0f.z = mul_nonIEEE(R0f.w, PV0f.x);
R0f.z = clamp(R0f.z, 0.0, 1.0);
PV1f.w = R1f.z * PS0f;
PS1f = 1.0 / R1f.w;
// 2
backupReg0f = R1f.y;
backupReg1f = R1f.x;
R1f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[0].w)) + -(intBitsToFloat(uf_remappedPS[0].y)));
R1f.y = mul_nonIEEE(backupReg0f, PS1f);
R1f.z = mul_nonIEEE(backupReg1f, PS1f);
R4f.z = mul_nonIEEE(R3f.z, R127f.w);
PS0f = R4f.z;
R1f.y = (texture(textureUnitPS4, R1f.zy).x);
// 0
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),R1f.y) + intBitsToFloat(uf_remappedPS[0].x));
PS0f = 1.0 / R1f.x;
// 1
PV1f.w = -(intBitsToFloat(uf_remappedPS[0].z)) * PS0f;
R127f.w = 1.0 / intBitsToFloat(uf_remappedPS[1].y);
PS1f = R127f.w;
// 2
PV0f.x = -(PV1f.w) + R127f.y;
// 3
PV1f.z = PV0f.x * R127f.w;
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
// 4
PV0f.y = mul_nonIEEE(R0f.z, PV1f.z);
// 5
PV1f.x = mul_nonIEEE(R2f.x, PV0f.y);
// 6
R4f.w = mul_nonIEEE(R5f.w, PV1f.x);
// export
if( ((vec4(R4f.x, R4f.y, R4f.z, R4f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w*$Bright);

}
