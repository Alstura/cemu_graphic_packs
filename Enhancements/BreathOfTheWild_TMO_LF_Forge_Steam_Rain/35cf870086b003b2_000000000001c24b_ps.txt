#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 35cf870086b003b2
uniform ivec4 uf_remappedPS[6];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20548800 res 256x128x1 dim 1 tm: 4 format 0007 compSel: 0 1 1 1 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x206db000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x205b5000 res 200x200x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 10) uniform samplerCubeArray textureUnitPS10;// Tex10 addr 0x3caee800 res 16x16x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x6) Sampler10 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem9;
layout(location = 7) in vec4 passParameterSem11;
layout(location = 8) in vec4 passParameterSem14;
layout(location = 9) in vec4 passParameterSem15;
layout(location = 10) in vec4 passParameterSem16;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex10 = 0.0;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem5;
R5f = passParameterSem8;
R6f = passParameterSem9;
R7f = passParameterSem11;
R8f = passParameterSem14;
R9f = passParameterSem15;
R10f = passParameterSem16;
R11f.xw = (texture(textureUnitPS1, R5f.zw).xw);
R5f.xw = (texture(textureUnitPS0, R5f.xy).xw);
// 0
backupReg0f = R7f.z;
R127f.x = (R5f.w * 2.0 + -(1.0));
R123f.y = (R5f.x * 2.0 + -(1.0));
PV0f.y = R123f.y;
R7f.z = -(backupReg0f);
PV0f.z = R7f.z;
R127f.w = mul_nonIEEE(R3f.y, R11f.w);
PV0f.w = R127f.w;
R5f.w = intBitsToFloat(uf_remappedPS[0].x);
PS0f = R5f.w;
// 1
redcCUBE(vec4(PV0f.z,PV0f.z,R7f.x,R7f.y),vec4(R7f.y,R7f.x,PV0f.z,PV0f.z),cubeMapSTM,cubeMapFaceId);
R126f.x = cubeMapSTM.x;
R126f.y = cubeMapSTM.y;
R126f.z = cubeMapSTM.z;
R126f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R126f.x;
PV1f.y = R126f.y;
PV1f.z = R126f.z;
PV1f.w = R126f.w;
PS1f = mul_nonIEEE(PV0f.y, PV0f.w);
// 2
R7f.x = R6f.x + PS1f;
R11f.y = -(R10f.w) + 1.0;
PV0f.z = mul_nonIEEE(R127f.x, R127f.w);
R3f.w = R11f.x;
R3f.w = clamp(R3f.w, 0.0, 1.0);
PS0f = 1.0 / abs(PV1f.z);
// 3
R123f.x = (mul_nonIEEE(R126f.x,PS0f) + 1.5);
PV1f.x = R123f.x;
R7f.y = R6f.y + PV0f.z;
R5f.z = R126f.w;
R123f.w = (mul_nonIEEE(R126f.y,PS0f) + 1.5);
PV1f.w = R123f.w;
PS1f = 1.0 / R2f.w;
// 4
R5f.x = PV1f.w;
R5f.y = PV1f.x;
R7f.z = mul_nonIEEE(R2f.x, PS1f);
R7f.w = mul_nonIEEE(R2f.y, PS1f);
R4f.w = R0f.x + -(R1f.x);
PS0f = R4f.w;
R5f.xyz = (textureLod(textureUnitPS10, vec4(redcCUBEReverse(R5f.xy,floatBitsToInt(R5f.z)),cubeMapArrayIndex10),R5f.w).xyz);
R6f.xw = (texture(textureUnitPS2, R7f.xy).xw);
R7f.x = (texture(textureUnitPS4, R7f.zw).x);
// 0
R126f.x = mul_nonIEEE(R5f.x, R11f.y);
PV0f.y = R6f.x;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R126f.z = mul_nonIEEE(R5f.y, R11f.y);
R126f.w = mul_nonIEEE(R5f.z, R11f.y);
R126f.y = R0f.z + -(R1f.z);
PS0f = R126f.y;
// 1
R127f.x = R3f.w + PV0f.y;
R127f.x /= 2.0;
PV1f.x = R127f.x;
R127f.yzw = vec3(R8f.x,R0f.y,R8f.y) + vec3(0.0,-(R1f.y),0.0);
R125f.x = 1.0 / R2f.w;
PS1f = R125f.x;
// 2
backupReg0f = R126f.w;
R123f.x = (mul_nonIEEE(R126f.x,intBitsToFloat(uf_remappedPS[1].y)) + 0.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R126f.z,intBitsToFloat(uf_remappedPS[1].y)) + 0.0);
PV0f.y = R123f.y;
R126f.z = R8f.z + 0.0;
R126f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[1].y)) + 0.0);
R126f.x = (mul_nonIEEE(R4f.w,PV1f.x) + R1f.x);
PS0f = R126f.x;
// 3
backupReg0f = R127f.z;
R2f.x = R2f.z * R125f.x;
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV0f.x) + R127f.y);
PV1f.y = R123f.y;
R127f.z = (mul_nonIEEE(R126f.y,R127f.x) + R1f.z);
R123f.w = (mul_nonIEEE(backupReg0f,R127f.x) + R1f.y);
PV1f.w = R123f.w;
R122f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),PV0f.y) + R127f.w);
PS1f = R122f.x;
// 4
backupReg0f = R126f.x;
R126f.x = mul_nonIEEE(backupReg0f, PV1f.y);
PV0f.x = R126f.x;
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w),R126f.w) + R126f.z);
PV0f.y = R123f.y;
R123f.z = (R4f.z * 2.0 + -(1.0));
PV0f.z = R123f.z;
R126f.w = mul_nonIEEE(PV1f.w, PS1f);
PV0f.w = R126f.w;
// 5
backupReg0f = R127f.z;
PV1f.x = R6f.w + PV0f.z;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.y = -(PV0f.x) + intBitsToFloat(uf_remappedPS[2].x);
R127f.z = mul_nonIEEE(backupReg0f, PV0f.y);
PV1f.z = R127f.z;
PV1f.w = -(PV0f.w) + intBitsToFloat(uf_remappedPS[2].y);
// 6
R123f.x = (mul_nonIEEE(R11f.w,PV1f.x) + -(R4f.y));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R127f.y = (mul_nonIEEE(PV1f.w,R10f.y) + R126f.w);
PV0f.y = R127f.y;
R126f.z = (mul_nonIEEE(PV1f.y,R10f.y) + R126f.x);
PV0f.z = R126f.z;
PV0f.w = -(PV1f.z) + intBitsToFloat(uf_remappedPS[2].z);
// 7
R126f.x = (mul_nonIEEE(PV0f.w,R10f.y) + R127f.z);
PV1f.x = R126f.x;
PV1f.y = R9f.y + -(PV0f.y);
PV1f.z = mul_nonIEEE(R0f.w, PV0f.x);
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
PV1f.w = R9f.x + -(PV0f.z);
// 8
backupReg0f = R126f.z;
R1f.x = mul_nonIEEE(R1f.w, PV1f.z);
R1f.x = clamp(R1f.x, 0.0, 1.0);
PV0f.y = R9f.z + -(PV1f.x);
R126f.z = (mul_nonIEEE(PV1f.w,R9f.w) + backupReg0f);
PV0f.z = R126f.z;
R126f.w = (mul_nonIEEE(PV1f.y,R9f.w) + R127f.y);
PV0f.w = R126f.w;
// 9
PV1f.x = -(PV0f.w) + intBitsToFloat(uf_remappedPS[3].y);
PV1f.y = -(PV0f.z) + intBitsToFloat(uf_remappedPS[3].x);
R127f.z = (mul_nonIEEE(PV0f.y,R9f.w) + R126f.x);
PV1f.z = R127f.z;
// 10
R9f.x = (mul_nonIEEE(PV1f.y,R10f.x) + R126f.z);
R9f.y = (mul_nonIEEE(PV1f.x,R10f.x) + R126f.w);
PV0f.w = -(PV1f.z) + intBitsToFloat(uf_remappedPS[3].z);
// 11
R9f.z = (mul_nonIEEE(PV0f.w,R10f.x) + R127f.z);
// 0
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].w),R7f.x) + intBitsToFloat(uf_remappedPS[4].x));
R123f.z = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[4].w)) + -(intBitsToFloat(uf_remappedPS[4].y)));
PV0f.z = R123f.z;
// 1
PS1f = 1.0 / PV0f.z;
// 2
PV0f.w = -(intBitsToFloat(uf_remappedPS[4].z)) * PS1f;
R126f.w = 1.0 / intBitsToFloat(uf_remappedPS[5].y);
PS0f = R126f.w;
// 3
PV1f.x = -(PV0f.w) + R127f.y;
// 4
PV0f.z = PV1f.x * R126f.w;
PV0f.z = clamp(PV0f.z, 0.0, 1.0);
// 5
PV1f.y = mul_nonIEEE(R1f.x, PV0f.z);
// 6
R9f.w = mul_nonIEEE(R3f.x, PV1f.y);
// export
if( ((vec4(R9f.x, R9f.y, R9f.z, R9f.w)).a > uf_alphaTestRef) == false) discard;

passPixelColor0 = vec4(R9f.x, R9f.y, R9f.z, R9f.w);

/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R9f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R9f.x, R9f.y, R9f.z, R9f.w)*$Bright;
}
}
