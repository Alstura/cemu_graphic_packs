#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6ba4f2eacc2b28f0
// some grass color something
uniform ivec4 uf_remappedPS[2];
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x43051800 res 47x47x1 dim 1 tm: 1 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2DArray textureUnitPS4;// Tex4 addr 0xac436000 res 32x128x2 dim 5 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x2) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R5i.xyz = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R1i.zw)).xyz);
// 0
PV0i.x = 0x3e19999a;
R2i.y = ((0.0 > intBitsToFloat(R0i.y))?int(0xFFFFFFFF):int(0x0));
PV0i.y = R2i.y;
PV0i.z = 0x3d23d70a;
PV0i.w = uf_remappedPS[0].y;
PS0i = 0x3da5e354;
// 1
R6i.x = ((PV0i.y == 0)?(0x3e19999a):(PV0i.x));
R6i.y = ((PV0i.y == 0)?(0x3db851ec):(PS0i));
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.w)));
R4i.w = ((PV0i.y == 0)?(0x3d23d70a):(PV0i.z));
R3i.w = 0x3c808081;
PS1i = R3i.w;
R4i.xyz = floatBitsToInt(texture(textureUnitPS4, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z))).xyz);
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(R5i.z)) + intBitsToFloat(R4i.z));
R127i.y = floatBitsToInt(-(intBitsToFloat(R5i.y)) + intBitsToFloat(R4i.y));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(0x3de147ae));
R127i.w = floatBitsToInt(-(intBitsToFloat(R5i.x)) + intBitsToFloat(R4i.x));
R122i.x = floatBitsToInt((-(intBitsToFloat(R1i.y)) * intBitsToFloat(0x41a00000) + intBitsToFloat(0x41200000)));
PS0i = R122i.x;
// 1
PV1i.x = uf_remappedPS[1].z;
R1i.y = floatBitsToInt((intBitsToFloat(R3i.y) * 0.5 + 0.5));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PS0i)) + intBitsToFloat(0xc0400000)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R2i.w)) + intBitsToFloat(R4i.y)));
PV1i.w = R123i.w;
R7i.w = 0x3f800000;
PS1i = R7i.w;
// 2
R7i.x = R3i.w;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x41cc0000));
R7i.z = PV1i.x;
R123i.w = ((R2i.y == 0)?(R4i.y):(PV1i.w));
PV0i.w = R123i.w;
R1i.x = floatBitsToInt((intBitsToFloat(R3i.x) * 0.5 + 0.5));
PS0i = R1i.x;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x41200000));
R126i.y = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(0x40c00000) + intBitsToFloat(0xbd75c28f)));
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * 4.0);
R3i.w = 0;
R1i.z = floatBitsToInt((intBitsToFloat(R3i.z) * 0.5 + 0.5));
PS1i = R1i.z;
// 4
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),-(intBitsToFloat(R2i.x))) + intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].y) + intBitsToFloat(PV1i.x));
PV0i.z = clampFI32(PV0i.z);
R1i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3b808081));
// 5
backupReg0i = R127i.y;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R5i.z)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV0i.z)) + intBitsToFloat(R5i.x)));
PV1i.z = R127i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.z)) + intBitsToFloat(R5i.y)));
PV1i.w = R127i.w;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(R6i.y) + -(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R6i.x) + -(intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R4i.w) + -(intBitsToFloat(PV1i.y)));
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R2i.w)) + intBitsToFloat(R127i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R2i.w)) + intBitsToFloat(R127i.z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R2i.w)) + intBitsToFloat(R127i.y)));
PV1i.z = R123i.z;
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.y)));
PV0i.w = R123i.w;
// 9
backupReg0i = R0i.w;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.y)));
// 10
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),-(intBitsToFloat(R126i.x))) + intBitsToFloat(PV1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),-(intBitsToFloat(R126i.x))) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),-(intBitsToFloat(R126i.x))) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 11
R3i.x = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0x3cac0831) + intBitsToFloat(PV0i.z)));
R3i.y = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0x3cbc6a7f) + intBitsToFloat(PV0i.w)));
R3i.z = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0xbda1cac1) + intBitsToFloat(PV0i.y)));
// 12
R2i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R2i.w = R1i.w;
// 13
R1i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
R1i.w = R3i.w;
// 14
R0i.xyz = ivec3(R7i.x,R7i.z,R7i.z);
R0i.w = R7i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
/* base color */
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
/* changes the way grass looks by angle probably the sun angle*/
passPixelColor3 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));


/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R1i.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w))*$Bright;
}

}
