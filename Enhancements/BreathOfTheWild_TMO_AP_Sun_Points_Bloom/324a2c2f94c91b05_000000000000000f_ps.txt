#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 324a2c2f94c91b05
// sun flares
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 1) noperspective in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem3;
// 0
R1f.yzw = vec3(R0f.x,0.0,1.0);
// export
// passPixelColor0 = vec4(R1f.x*$Red, R1f.y*$Green, R1f.z*$Blue, R1f.w)*$Bright;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);

// check if we want to change a color
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	// Adjust brightness of greyscale
	luma = luma*$Bright;
	 
	// Normalize RGB (255,255,255) => RGB (1,1,1) system
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor0.rgb = vec3(luma*rred, luma*ggreen, luma*bblue);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}
}
