#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ee44f9e2e062f0eb
uniform ivec4 uf_remappedPS[5];
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xb0e4e000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xb0e60000 res 256x256x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0xb0e69000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem6;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem5;
layout(location = 5) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem2;
R2f = passParameterSem6;
R3f = passParameterSem4;
R4f = passParameterSem5;
R5f = passParameterSem7;
R6f.xy = (texture(textureUnitPS4, R0f.xy).xy);
R7f.xyz = (texture(textureUnitPS5, R0f.xy).xyz);
R0f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
R127f.xyz = vec3(R1f.x,R1f.y,R1f.z) + vec3(R3f.x,R3f.y,R3f.z);
PV0f.x = R127f.x;
PV0f.y = R127f.y;
PV0f.z = R127f.z;
R124f.w = (R6f.x * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PV0f.w = R124f.w;
R127f.w = (R6f.y * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PS0f = R127f.w;
// 1
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.z = mul_nonIEEE(PV0f.w, PV0f.w);
PS1f = R126f.z;
// 2
tempf.x = dot(vec4(R5f.x,R5f.y,R5f.z,-0.0),vec4(R5f.x,R5f.y,R5f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 3
backupReg0f = R127f.y;
backupReg1f = R126f.z;
R124f.x = mul_nonIEEE(R127f.z, PS0f);
PV1f.x = R124f.x;
R127f.y = mul_nonIEEE(backupReg0f, PS0f);
PV1f.y = R127f.y;
R126f.z = mul_nonIEEE(R127f.x, PS0f);
PV1f.z = R126f.z;
R126f.w = (mul_nonIEEE(R127f.w,R127f.w) + backupReg1f);
R126f.w = clamp(R126f.w, 0.0, 1.0);
PS1f = sqrt(PV0f.x);
// 4
R126f.x = mul_nonIEEE(R4f.w, R127f.w);
PV0f.y = mul_nonIEEE(R4f.y, PV1f.z);
PV0f.z = mul_nonIEEE(R4f.x, PV1f.x);
PV0f.w = mul_nonIEEE(R4f.z, PV1f.y);
R127f.w = 1.0 / PS1f;
PS0f = R127f.w;
// 5
R127f.x = (mul_nonIEEE(-(R4f.y),R124f.x) + PV0f.w);
PV1f.x = R127f.x;
R1f.y = mul_nonIEEE(R5f.x, PS0f);
R127f.z = (mul_nonIEEE(-(R4f.x),R127f.y) + PV0f.y);
PV1f.z = R127f.z;
R125f.w = (mul_nonIEEE(-(R4f.z),R126f.z) + PV0f.z);
PV1f.w = R125f.w;
R3f.y = mul_nonIEEE(R5f.y, PS0f);
PS1f = R3f.y;
// 6
PV0f.x = mul_nonIEEE(R126f.z, PV1f.z);
PV0f.y = mul_nonIEEE(R124f.x, PV1f.w);
R124f.z = mul_nonIEEE(R5f.z, R127f.w);
PV0f.w = mul_nonIEEE(R127f.y, PV1f.x);
R125f.x = -(R126f.w) + 1.0;
PS0f = R125f.x;
// 7
backupReg0f = R127f.x;
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(-(R126f.z),R125f.w) + PV0f.w);
R123f.y = (mul_nonIEEE(-(R124f.x),backupReg0f) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(-(R127f.y),R127f.z) + PV0f.y);
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(backupReg0f, R126f.x);
PS1f = mul_nonIEEE(R125f.w, R126f.x);
// 8
PV0f.x = mul_nonIEEE(R127f.z, R126f.x);
R126f.y = R1f.y + intBitsToFloat(uf_remappedPS[0].x);
R127f.z = (mul_nonIEEE(R124f.w,PV1f.y) + PS1f);
R125f.w = (mul_nonIEEE(R124f.w,PV1f.z) + PV1f.w);
R125f.y = R3f.y + intBitsToFloat(uf_remappedPS[0].y);
PS0f = R125f.y;
// 9
backupReg0f = R125f.x;
R125f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), intBitsToFloat(uf_remappedPS[1].w));
R124f.y = 0.0;
R125f.z = R124f.z + intBitsToFloat(uf_remappedPS[0].z);
R123f.w = (mul_nonIEEE(R124f.w,R127f.x) + PV0f.x);
PV1f.w = R123f.w;
PS1f = sqrt(backupReg0f);
// 10
backupReg0f = R127f.y;
backupReg1f = R124f.x;
R124f.x = (mul_nonIEEE(PS1f,R126f.z) + R125f.w);
R127f.y = (mul_nonIEEE(PS1f,backupReg0f) + R127f.z);
R127f.z = (mul_nonIEEE(PS1f,backupReg1f) + PV1f.w);
R124f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(uf_remappedPS[1].w));
R4f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(uf_remappedPS[1].w));
PS0f = R4f.y;
// 11
tempf.x = dot(vec4(R126f.y,R125f.y,R125f.z,-0.0),vec4(R126f.y,R125f.y,R125f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.w = 0.0;
PS1f = R125f.w;
// 12
tempf.x = dot(vec4(R124f.x,R127f.y,R127f.z,-0.0),vec4(R124f.x,R127f.y,R127f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 13
R126f.x = (R7f.x * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PV1f.y = mul_nonIEEE(R125f.z, PS0f);
PV1f.z = mul_nonIEEE(R125f.y, PS0f);
PV1f.w = mul_nonIEEE(R126f.y, PS0f);
tempResultf = 1.0 / sqrt(PV0f.x);
R127f.x = tempResultf;
PS1f = R127f.x;
// 14
backupReg0f = R124f.x;
backupReg1f = R127f.y;
R124f.x = mul_nonIEEE(PV1f.w, intBitsToFloat(uf_remappedPS[1].w));
R127f.y = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[1].w));
R125f.z = mul_nonIEEE(PV1f.y, intBitsToFloat(uf_remappedPS[1].w));
R127f.w = mul_nonIEEE(backupReg0f, PS1f);
R126f.y = mul_nonIEEE(backupReg1f, PS1f);
PS0f = R126f.y;
// 15
backupReg0f = R127f.z;
PV1f.x = intBitsToFloat(0x3ce0e0e1);
R125f.y = (R7f.z * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
R127f.z = mul_nonIEEE(backupReg0f, R127f.x);
PV1f.z = R127f.z;
R126f.w = (R7f.y * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
R9f.w = 1.0;
PS1f = R9f.w;
// 16
backupReg0f = R124f.x;
R124f.x = dot(vec4(-(backupReg0f),-(R127f.y),-(R125f.z),-(R125f.w)),vec4(R127f.w,R126f.y,PV1f.z,PV1f.z));
PV0f.x = R124f.x;
PV0f.y = R124f.x;
PV0f.z = R124f.x;
PV0f.w = R124f.x;
R9f.x = PV1f.x;
PS0f = R9f.x;
// 17
tempf.x = dot(vec4(-(R124f.w),-(R4f.y),-(R125f.x),-(R124f.y)),vec4(R127f.w,R126f.y,R127f.z,R127f.z));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R6f.x = (R127f.w * 0.5 + 0.5);
PS1f = R6f.x;
// 18
PV0f.x = mul_nonIEEE(R124f.z, R125f.x);
R7f.y = mul_nonIEEE(PV1f.x, R124f.x);
R6f.z = (R127f.z * 0.5 + 0.5);
R8f.w = intBitsToFloat(0x3c008081);
R6f.y = (R126f.y * 0.5 + 0.5);
PS0f = R6f.y;
// 19
tempf.x = dot(vec4(R1f.y,R3f.y,PV0f.x,-0.0),vec4(R124f.w,R4f.y,1.0,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R6f.w = 0.0;
PS1f = R6f.w;
// 20
tempf.x = dot(vec4(R1f.y,R3f.y,R124f.z,-0.0),vec4(R127f.w,R126f.y,R127f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = max(-(PV1f.x), 0.0);
// 21
PV1f.x = min(PS0f, 1.0);
R0f.w = PV0f.x + 1.0;
R0f.w = clamp(R0f.w, 0.0, 1.0);
PV1f.w = R0f.w;
// 22
R7f.x = (mul_nonIEEE(PV1f.w,PV1f.w) + R125f.y);
R7f.x = clamp(R7f.x, 0.0, 1.0);
R1f.y = mul_nonIEEE(PV1f.x, PV1f.x);
R7f.z = (mul_nonIEEE(PV1f.w,PV1f.w) + R126f.x);
R7f.z = clamp(R7f.z, 0.0, 1.0);
R4f.w = (mul_nonIEEE(PV1f.w,PV1f.w) + R126f.w);
R4f.w = clamp(R4f.w, 0.0, 1.0);
// 0
R123f.x = (mul_nonIEEE(-(R5f.z),intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(uf_remappedPS[2].z));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R125f.y = mul_nonIEEE(R7f.z, R1f.y);
R127f.z = mul_nonIEEE(R4f.w, R1f.y);
R126f.w = mul_nonIEEE(R7f.x, R1f.y);
// 1
R123f.x = (mul_nonIEEE(-(PV0f.x),R7f.y) + R7f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.z = intBitsToFloat(uf_remappedPS[3].z);
// 2
R9f.y = PV1f.z;
tempResultf = log2(PV1f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 3
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), PS0f);
// 4
PS0f = exp2(PV1f.w);
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), PS0f);
// 6
PV0f.z = mul_nonIEEE(R0f.w, PV1f.x);
// 7
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R126f.w) + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R127f.z) + PV0f.z);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R125f.y) + PV0f.z);
PV1f.w = R123f.w;
// 8
R123f.y = (mul_nonIEEE(R0f.z,PV1f.x) + R0f.z);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R0f.x,PV1f.w) + R0f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R0f.y,PV1f.y) + R0f.y);
PV0f.w = R123f.w;
// 9
R8f.x = mul_nonIEEE(R2f.x, PV0f.z);
R8f.y = mul_nonIEEE(R2f.x, PV0f.w);
R8f.z = mul_nonIEEE(R2f.x, PV0f.y);
// 10
R2f.xyz = vec3(R6f.x,R6f.y,R6f.z);
R2f.w = R6f.w;
// 11
R1f.xyz = vec3(R8f.x,R8f.y,R8f.z);
R1f.w = R8f.w;
// 12
R0f.xyz = vec3(R9f.x,R9f.y,R9f.z);
R0f.w = R9f.w;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor3 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);

/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}
}
