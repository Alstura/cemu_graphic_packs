#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 12d8627fe9906695
// gaussian? bloom and shadow lighting
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4240800 res 96x96x1 dim 1 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R0f.xw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xz).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.xz).xyzw);
// 0
R123f.x = (R2f.w * intBitsToFloat(0x3d8fe9dc) + 0.0);
PV0f.x = R123f.x;
R123f.y = (R2f.z * intBitsToFloat(0x3d8fe9dc) + 0.0);
PV0f.y = R123f.y;
R123f.z = (R2f.y * intBitsToFloat(0x3d8fe9dc) + 0.0);
PV0f.z = R123f.z;
R123f.w = (R2f.x * intBitsToFloat(0x3d8fe9dc) + 0.0);
PV0f.w = R123f.w;
// 1
R123f.x = (R3f.w * intBitsToFloat(0x3ea1e718) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R3f.z * intBitsToFloat(0x3ea1e718) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R3f.y * intBitsToFloat(0x3ea1e718) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R3f.x * intBitsToFloat(0x3ea1e718) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (R4f.w * intBitsToFloat(0x3e6879c6) + PV1f.x);
PV0f.x = R123f.x;
R123f.y = (R4f.z * intBitsToFloat(0x3e6879c6) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (R4f.y * intBitsToFloat(0x3e6879c6) + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R4f.x * intBitsToFloat(0x3e6879c6) + PV1f.w);
PV0f.w = R123f.w;
// 3
R123f.x = (R0f.w * intBitsToFloat(0x3ea1e718) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R0f.z * intBitsToFloat(0x3ea1e718) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R0f.y * intBitsToFloat(0x3ea1e718) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R0f.x * intBitsToFloat(0x3ea1e718) + PV0f.w);
PV1f.w = R123f.w;
// 4
backupReg0f = R1f.x;
backupReg1f = R1f.y;
backupReg2f = R1f.z;
backupReg3f = R1f.w;
R1f.x = (backupReg0f * intBitsToFloat(0x3d8fe9dc) + PV1f.w);
R1f.y = (backupReg1f * intBitsToFloat(0x3d8fe9dc) + PV1f.z);
R1f.z = (backupReg2f * intBitsToFloat(0x3d8fe9dc) + PV1f.y);
R1f.w = (backupReg3f * intBitsToFloat(0x3d8fe9dc) + PV1f.x);
// export
// passPixelColor0 = vec4(R1f.x*$Red, R1f.y*$Green, R1f.z*$Blue, R1f.w)*$Bright;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// check if we want to change a color
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	// Adjust brightness of greyscale
	luma = luma*$Bright;
	 
	// Normalize RGB (255,255,255) => RGB (1,1,1) system
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}
}
