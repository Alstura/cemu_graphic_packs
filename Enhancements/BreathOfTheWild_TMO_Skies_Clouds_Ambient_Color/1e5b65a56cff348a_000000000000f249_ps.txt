#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 1e5b65a56cff348a
uniform ivec4 uf_remappedPS[18];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x23c55000 res 512x512x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x23bfd000 res 512x512x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x23d2d000 res 32x32x1 dim 1 tm: 2 format 0035 compSel: 0 1 1 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 1 1 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x23d2d000 res 32x32x1 dim 1 tm: 2 format 0035 compSel: 0 1 1 1 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 1 1 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem6;
// 0
backupReg0f = R0f.x;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
PV0f.x = R0f.y + -(R4f.w);
PV0f.y = backupReg0f + -(R4f.z);
R126f.z = backupReg0f + -(R4f.x);
PV0f.z = R126f.z;
R125f.w = backupReg1f + -(R4f.y);
PS0f = 1.0 / intBitsToFloat(uf_remappedPS[0].w);
// 1
PV1f.x = intBitsToFloat(uf_remappedPS[1].y) + intBitsToFloat(uf_remappedPS[1].z);
R127f.y = PV0f.x * PS0f;
PV1f.z = mul_nonIEEE(PV0f.z, PV0f.z);
R127f.w = PV0f.y * PS0f;
PV1f.w = R127f.w;
R127f.z = 0.0;
PS1f = R127f.z;
// 2
PV0f.x = mul_nonIEEE(PV1f.w, PV1f.w);
R125f.y = (mul_nonIEEE(R125f.w,R125f.w) + PV1f.z);
R124f.z = R5f.x;
R124f.z = clamp(R124f.z, 0.0, 1.0);
R124f.w = mul_nonIEEE(R3f.x, R5f.x);
R5f.y = 1.0 / PV1f.x;
PS0f = R5f.y;
// 3
R13f.x = -(intBitsToFloat(uf_remappedPS[2].w)) + 0.0;
PV1f.y = mul_nonIEEE(R127f.z, R127f.z);
R127f.z = (mul_nonIEEE(R127f.y,R127f.y) + PV0f.x);
PV1f.z = R127f.z;
R126f.y = 1.0 / intBitsToFloat(uf_remappedPS[3].w);
PS1f = R126f.y;
// 4
R126f.x = dot(vec4(R126f.z,R125f.w,PV1f.y,-0.0),vec4(R126f.z,R125f.w,1.0,0.0));
PV0f.x = R126f.x;
PV0f.y = R126f.x;
PV0f.z = R126f.x;
PV0f.w = R126f.x;
tempResultf = log2(PV1f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), PS0f);
R126f.w = sqrt(R127f.z);
PS1f = R126f.w;
// 6
R127f.x = PS1f + -(intBitsToFloat(uf_remappedPS[4].z));
PV0f.w = PS1f + -(intBitsToFloat(uf_remappedPS[3].z));
PS0f = exp2(PV1f.x);
// 7
PV1f.x = PV0f.w * R126f.y;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.y = mul_nonIEEE(R127f.y, PS0f);
R5f.z = R126f.w + -(intBitsToFloat(uf_remappedPS[5].y));
PV1f.w = mul_nonIEEE(R127f.w, PS0f);
PS1f = 1.0 / intBitsToFloat(uf_remappedPS[4].w);
// 8
R11f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y),PV1f.w) + R0f.x);
PV0f.x = R11f.x;
R12f.y = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedPS[6].x)) + 1.0);
R0f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y),PV1f.y) + R0f.y);
PV0f.z = R0f.z;
R126f.w = R127f.x * PS1f;
R126f.w = clamp(R126f.w, 0.0, 1.0);
R1f.w = sqrt(R125f.y);
PS0f = R1f.w;
// 9
backupReg0f = R126f.z;
backupReg1f = R126f.x;
R126f.x = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[7].w));
R11f.y = (mul_nonIEEE(R125f.w,-(intBitsToFloat(uf_remappedPS[1].w))) + PV0f.z);
PV1f.y = R11f.y;
R126f.z = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedPS[7].w));
R0f.w = (mul_nonIEEE(backupReg0f,-(intBitsToFloat(uf_remappedPS[1].w))) + PV0f.x);
PV1f.w = R0f.w;
R3f.w = sqrt(backupReg1f);
PS1f = R3f.w;
// 10
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV1f.w);
R125f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV1f.y);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), PV1f.w);
R125f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), PV1f.y);
R127f.w = mul_nonIEEE(R11f.x, intBitsToFloat(uf_remappedPS[1].x));
PS0f = R127f.w;
// 11
R0f.x = intBitsToFloat(uf_remappedPS[8].w) + PV0f.z;
R127f.z = mul_nonIEEE(R0f.z, intBitsToFloat(uf_remappedPS[1].x));
R4f.w = R126f.x + intBitsToFloat(uf_remappedPS[8].w);
tempResultf = log2(R124f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R125f.z = tempResultf;
PS1f = R125f.z;
// 12
R3f.x = intBitsToFloat(uf_remappedPS[7].y) + R127f.x;
R0f.y = intBitsToFloat(uf_remappedPS[7].x) + R125f.w;
R3f.z = intBitsToFloat(uf_remappedPS[7].z) + R125f.y;
R2f.w = intBitsToFloat(uf_remappedPS[7].y) + R127f.w;
R4f.y = intBitsToFloat(uf_remappedPS[7].x) + R126f.z;
PS0f = R4f.y;
// 13
R5f.x = R125f.z * 0.25;
R2f.y = intBitsToFloat(uf_remappedPS[7].z) + R127f.z;
R4f.z = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedPS[5].x));
tempResultf = log2(R124f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R13f.y = tempResultf;
PS1f = R13f.y;
R6f.xy = (texture(textureUnitPS2, R0f.xy).xw);
R0f.xy = (texture(textureUnitPS3, R0f.xy).xw);
R7f.xy = (texture(textureUnitPS2, R3f.zx).xw);
R3f.xy = (texture(textureUnitPS3, R3f.zx).xw);
R9f.xy = (texture(textureUnitPS2, R4f.wy).xw);
R4f.xy = (texture(textureUnitPS3, R4f.wy).xw);
R10f.xy = (texture(textureUnitPS2, R2f.yw).xw);
R8f.xy = (texture(textureUnitPS3, R2f.yw).xw);
// 0
backupReg0f = R0f.y;
R123f.x = (-(intBitsToFloat(uf_remappedPS[9].x)) * 4.0 + R4f.z);
PV0f.x = R123f.x;
R0f.y = R4f.z + intBitsToFloat(uf_remappedPS[8].z);
PV0f.z = -(R6f.x) + R0f.x;
PV0f.w = -(R6f.y) + backupReg0f;
R12f.x = exp2(R5f.x);
PS0f = R12f.x;
// 1
R127f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[10].x)) + R6f.y);
R123f.y = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[10].x)) + R6f.x);
PV1f.y = R123f.y;
PV1f.z = -(R7f.x) + R3f.x;
PV1f.w = -(R7f.y) + R3f.y;
R2f.z = intBitsToFloat(uf_remappedPS[8].z) + PV0f.x;
PS1f = R2f.z;
// 2
R126f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[10].x)) + R7f.y);
R123f.y = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[10].x)) + R7f.x);
PV0f.y = R123f.y;
PV0f.z = -(R9f.y) + R4f.y;
PV0f.w = -(R9f.x) + R4f.x;
R124f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), PV1f.y);
PS0f = R124f.z;
// 3
R123f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[10].x)) + R9f.x);
PV1f.x = R123f.x;
PV1f.y = -(R10f.y) + R8f.y;
R123f.z = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[10].x)) + R9f.y);
PV1f.z = R123f.z;
PV1f.w = -(R10f.x) + R8f.x;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), PV0f.y);
PS1f = R127f.z;
// 4
R123f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[10].x)) + R10f.x);
PV0f.x = R123f.x;
R125f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), PV1f.x);
R123f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[10].x)) + R10f.y);
PV0f.z = R123f.z;
R126f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), R127f.x);
PV0f.w = R126f.w;
R125f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), PV1f.z);
PS0f = R125f.z;
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), PV0f.x);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), PV0f.z);
PV1f.z = R124f.z + R127f.z;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R126f.x);
R127f.y = PV0f.w + R127f.z;
PS1f = R127f.y;
// 6
PV0f.x = R126f.w + PV1f.w;
PV0f.y = R125f.y + PV1f.x;
PV0f.z = R125f.z + PV1f.y;
PV0f.w = R5f.y * PV1f.z;
PS0f = R124f.z + PV1f.w;
PS0f *= 2.0;
// 7
PV1f.x = PV0f.y * R5f.y;
PV1f.y = PV0f.w + -(0.5);
PV1f.z = PV0f.z * R5f.y;
PV1f.w = R5f.y * PV0f.x;
R122f.x = (R127f.y * intBitsToFloat(0x40c00000) + PS0f);
PS1f = R122f.x;
// 8
PV0f.x = PV1f.w + -(0.5);
PV0f.y = PV1f.z + -(0.5);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].y), PV1f.y);
PV0f.w = PV1f.x + -(0.5);
PS0f = PS1f + -(1.0);
// 9
R5f.x = (mul_nonIEEE(R12f.y,PV0f.z) + R0f.w);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].y), PV0f.w);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].y), PV0f.y);
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[8].y), PV0f.x);
R10f.y = (mul_nonIEEE(PS0f,intBitsToFloat(uf_remappedPS[11].x)) + 1.0);
PS1f = R10f.y;
// 10
backupReg0f = R0f.z;
R0f.x = (mul_nonIEEE(R12f.y,PV1f.y) + R11f.x);
R5f.y = (mul_nonIEEE(R12f.y,PV1f.w) + R11f.y);
R0f.z = (mul_nonIEEE(R12f.y,PV1f.z) + backupReg0f);
R0f.w = (PS1f * 0.5 + intBitsToFloat(0x3f19999a));
R4f.z = intBitsToFloat(uf_remappedPS[0].x) + -(R1f.w);
PS0f = R4f.z;
R3f.z = (texture(textureUnitPS0, R5f.xy).x);
R1f.w = (texture(textureUnitPS1, R5f.xy).x);
R2f.w = (texture(textureUnitPS0, R0f.xz).x);
R0f.z = (texture(textureUnitPS1, R0f.xz).x);
// 0
backupReg0f = R0f.z;
PV0f.x = max(R4f.z, 0.0);
PV0f.y = -(R3f.z) + R1f.w;
PV0f.z = R0f.w + -(1.0);
PV0f.w = -(R2f.w) + backupReg0f;
R126f.w = max(R12f.x, 0.0);
PS0f = R126f.w;
// 1
R123f.x = (mul_nonIEEE(PV0f.y,intBitsToFloat(uf_remappedPS[10].x)) + R3f.z);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[10].x)) + R2f.w);
PV1f.y = R123f.y;
PV1f.z = min(PV0f.x, 0.5);
R127f.w = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[11].y)) + 1.0);
// 2
backupReg0f = R0f.y;
PV0f.x = intBitsToFloat(uf_remappedPS[9].w) + -(R3f.w);
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
PV0f.y = mul_nonIEEE(PV1f.z, PV1f.z);
PV0f.z = PV1f.y + backupReg0f;
PV0f.w = PV1f.x + R2f.z;
R2f.z = min(intBitsToFloat(uf_remappedPS[3].x), R126f.w);
PS0f = R2f.z;
// 3
R125f.x = (mul_nonIEEE(PV0f.x,PV0f.x) + intBitsToFloat(uf_remappedPS[12].x));
R127f.y = mul_nonIEEE(R2f.x, PV0f.w);
R127f.y = clamp(R127f.y, 0.0, 1.0);
PV1f.y = R127f.y;
R3f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].w), PV0f.y);
PV1f.z = R3f.z;
R124f.w = mul_nonIEEE(R2f.x, PV0f.z);
R124f.w = clamp(R124f.w, 0.0, 1.0);
PV1f.w = R124f.w;
// 4
PV0f.x = PV1f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
PV0f.y = PV1f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
PV0f.z = PV1f.w + intBitsToFloat(uf_remappedPS[9].y);
R126f.w = intBitsToFloat(uf_remappedPS[9].z) + PV1f.y;
R124f.x = (-(PV1f.z) * intBitsToFloat(0x40a00000) + 1.0);
PS0f = R124f.x;
// 5
PV1f.x = PV0f.y + -(intBitsToFloat(uf_remappedPS[12].z));
PV1f.y = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[13].x));
PV1f.z = -(intBitsToFloat(uf_remappedPS[12].z)) + PV0f.x;
R125f.w = -(R127f.y) + PV0f.z;
R125f.z = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[13].y));
PS1f = R125f.z;
// 6
PV0f.x = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[13].z));
PV0f.y = -(R124f.w) + R126f.w;
R124f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].y), PV1f.x);
R124f.z = clamp(R124f.z, 0.0, 1.0);
PV0f.w = max(PV1f.z, 0.0);
R127f.y = mul_nonIEEE(PV1f.y, R127f.w);
PS0f = R127f.y;
// 7
R126f.x = mul_nonIEEE(R125f.z, R127f.w);
PV1f.y = min(PV0f.w, intBitsToFloat(0x3f733333));
R127f.z = mul_nonIEEE(PV0f.x, R127f.w);
PV1f.w = PV0f.y * intBitsToFloat(0x41100000);
R125f.y = R125f.w * intBitsToFloat(0x41200000);
R125f.y = clamp(R125f.y, 0.0, 1.0);
PS1f = R125f.y;
// 8
R2f.x = (PV1f.y * intBitsToFloat(0x3e4ccccd) + R124f.z);
PV0f.x = R2f.x;
PV0f.y = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[14].x));
R124f.z = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[14].z));
PV0f.w = mul_nonIEEE(R124f.w, intBitsToFloat(uf_remappedPS[14].y));
R125f.z = mul_nonIEEE(R10f.y, PV1f.w);
R125f.z = clamp(R125f.z, 0.0, 1.0);
PS0f = R125f.z;
// 9
R123f.x = (mul_nonIEEE(R124f.w,intBitsToFloat(uf_remappedPS[15].y)) + -(R126f.x));
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].y)),PV0f.x) + 0.25);
PV1f.y = R123f.y;
R126f.z = mul_nonIEEE(R125f.y, PV0f.y);
R123f.w = (mul_nonIEEE(R124f.w,intBitsToFloat(uf_remappedPS[15].x)) + -(R127f.y));
PV1f.w = R123f.w;
R127f.x = mul_nonIEEE(R125f.y, PV0f.w);
PS1f = R127f.x;
// 10
backupReg0f = R124f.z;
R123f.x = (mul_nonIEEE(R124f.w,intBitsToFloat(uf_remappedPS[15].z)) + -(R127f.z));
PV0f.x = R123f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z), PV1f.y);
R124f.z = (mul_nonIEEE(PV1f.w,R125f.z) + R127f.y);
PV0f.w = mul_nonIEEE(R125f.y, backupReg0f);
R124f.w = (mul_nonIEEE(PV1f.x,R125f.z) + R126f.x);
PS0f = R124f.w;
// 11
PV1f.x = mul_nonIEEE(R125f.x, R127f.x);
R127f.y = (mul_nonIEEE(PV0f.x,R125f.z) + R127f.z);
PV1f.y = R127f.y;
PV1f.z = mul_nonIEEE(R125f.x, R126f.z);
PV1f.w = mul_nonIEEE(R125f.x, PV0f.w);
PS1f = max(PV0f.y, 0.0);
// 12
R127f.x = min(PS1f, intBitsToFloat(0x42c80000));
PV0f.x = R127f.x;
PV0f.y = max(PV1f.y, PV1f.w);
PV0f.z = max(R124f.w, PV1f.x);
PV0f.w = max(R124f.z, PV1f.z);
R125f.x = R125f.y * intBitsToFloat(0x41200000);
R125f.x = clamp(R125f.x, 0.0, 1.0);
PS0f = R125f.x;
// 13
PV1f.x = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[16].x));
PV1f.y = -(R127f.y) + PV0f.y;
PV1f.z = -(R124f.w) + PV0f.z;
PV1f.w = -(R124f.z) + PV0f.w;
R126f.x = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[16].y));
PS1f = R126f.x;
// 14
backupReg0f = R127f.y;
R123f.x = (mul_nonIEEE(PV1f.w,R125f.x) + R124f.z);
PV0f.x = R123f.x;
R127f.y = (mul_nonIEEE(PV1f.z,R125f.x) + R124f.w);
R124f.z = (mul_nonIEEE(PV1f.y,R125f.x) + backupReg0f);
PV0f.w = mul_nonIEEE(R127f.x, intBitsToFloat(uf_remappedPS[16].z));
PS0f = mul_nonIEEE(R3f.z, PV1f.x);
// 15
PV1f.x = mul_nonIEEE(R3f.z, PV0f.w);
PV1f.y = mul_nonIEEE(R3f.z, R126f.x);
R127f.z = (PS0f * intBitsToFloat(0x425c0000) + PV0f.x);
PV1f.w = max(R124f.x, intBitsToFloat(0x3f4ccccd));
R125f.y = (R3f.z * intBitsToFloat(0x3e4ccccd) + R2f.z);
R125f.y = clamp(R125f.y, 0.0, 1.0);
PS1f = R125f.y;
// 16
PV0f.x = min(PV1f.w, 1.0);
R123f.y = (PV1f.x * intBitsToFloat(0x425c0000) + R124f.z);
PV0f.y = R123f.y;
R123f.z = (PV1f.y * intBitsToFloat(0x425c0000) + R127f.y);
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[17].y), R13f.y);
PS0f = mul_nonIEEE(R2f.x, R3f.z);
// 17
R123f.x = (mul_nonIEEE(R127f.z,PV0f.x) + -(R1f.x));
PV1f.x = R123f.x;
R126f.y = (PS0f * intBitsToFloat(0x40c00000) + R2f.x);
R123f.z = (mul_nonIEEE(PV0f.y,PV0f.x) + -(R1f.z));
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(PV0f.z,PV0f.x) + -(R1f.y));
PV1f.w = R123f.w;
PS1f = exp2(PV0f.w);
// 18
backupReg0f = R125f.y;
backupReg0f = R125f.y;
R126f.x = (mul_nonIEEE(PV1f.w,R125f.y) + R1f.y);
PV0f.x = R126f.x;
R125f.y = (mul_nonIEEE(PV1f.x,backupReg0f) + R1f.x);
PV0f.y = R125f.y;
R127f.z = (mul_nonIEEE(R13f.x,PS1f) + intBitsToFloat(uf_remappedPS[2].w));
R124f.w = (mul_nonIEEE(PV1f.z,backupReg0f) + R1f.z);
PS0f = 1.0 / intBitsToFloat(uf_remappedPS[5].z);
// 19
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[2].x)) + -(PV0f.y));
PV1f.x = R123f.x;
R127f.y = R5f.z * PS0f;
R127f.y = clamp(R127f.y, 0.0, 1.0);
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[2].y)) + -(PV0f.x));
PV1f.w = R123f.w;
// 20
R123f.x = (mul_nonIEEE(PV1f.w,R127f.z) + R126f.x);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV1f.x,R127f.z) + R125f.y);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[2].z)) + -(R124f.w));
PV0f.z = R123f.z;
// 21
R5f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), PV0f.y);
R5f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), PV0f.x);
R123f.w = (mul_nonIEEE(PV0f.z,R127f.z) + R124f.w);
PV1f.w = R123f.w;
R5f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].w),R127f.y) + R126f.y);
R5f.w = clamp(R5f.w, 0.0, 1.0);
PS1f = R5f.w;
// 22
R5f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), PV1f.w);
// export
passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);

/*check if we want to change a color*/
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	// /*Adjust brightness of greyscale*/
	luma = luma*$Bright;
	 
	// /*Normalize RGB (255,255,255) => RGB (1,1,1) system*/
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R5f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w*$Bright);
}

}
