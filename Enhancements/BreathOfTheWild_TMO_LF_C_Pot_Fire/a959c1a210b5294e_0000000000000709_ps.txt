#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader a959c1a210b5294e
uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20e26000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x20e2f800 res 64x64x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 2 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem11;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
R4f = passParameterSem4;
R5f = passParameterSem8;
R6f = passParameterSem11;
R2f.w = (texture(textureUnitPS0, R5f.xy).y);
R4f.z = (texture(textureUnitPS1, R5f.zw).z);
// 0
R7f.x = R5f.z;
R8f.y = (R0f.w * 2.0 + -(1.0));
PV0f.z = mul_nonIEEE(R4f.y, R4f.z);
R123f.w = (R2f.w * 2.0 + -(1.0));
PV0f.w = R123f.w;
PS0f = 1.0 / R3f.w;
// 1
R5f.x = mul_nonIEEE(R3f.x, PS0f);
R7f.y = (mul_nonIEEE(PV0f.w,PV0f.z) + R5f.w);
R5f.z = mul_nonIEEE(R3f.y, PS0f);
R5f.w = -(intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[0].w);
PS1f = 1.0 / R3f.w;
// 2
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(R2f.x,R2f.y,R2f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = R3f.z * PS1f;
// 3
backupReg0f = R0f.x;
R0f.x = backupReg0f + -(R1f.x);
R3f.y = R0f.y + -(R1f.y);
R3f.z = (mul_nonIEEE(PS0f,intBitsToFloat(uf_remappedPS[1].w)) + -(intBitsToFloat(uf_remappedPS[1].y)));
R0f.w = R0f.z + -(R1f.z);
tempResultf = 1.0 / sqrt(PV0f.x);
R0f.z = tempResultf;
PS1f = R0f.z;
R0f.y = (texture(textureUnitPS4, R5f.xz).x);
R7f.xyw = (texture(textureUnitPS1, R7f.xy).xyw);
// 0
backupReg0f = R0f.z;
backupReg1f = R0f.y;
PV0f.x = mul_nonIEEE(R2f.x, R0f.z);
PV0f.y = mul_nonIEEE(R2f.y, R0f.z);
PV0f.z = mul_nonIEEE(R2f.z, backupReg0f);
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w),backupReg1f) + intBitsToFloat(uf_remappedPS[1].x));
R127f.y = 1.0 / R3f.z;
PS0f = R127f.y;
// 1
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.y = 1.0 / R5f.w;
PS1f = R126f.y;
// 2
backupReg0f = R127f.y;
PV0f.x = max(PV1f.x, -(PV1f.x));
R127f.y = (mul_nonIEEE(R7f.w,R7f.w) + R7f.x);
PV0f.y = R127f.y;
PV0f.w = -(intBitsToFloat(uf_remappedPS[1].z)) * backupReg0f;
R127f.z = 1.0 / intBitsToFloat(uf_remappedPS[2].y);
PS0f = R127f.z;
// 3
backupReg0f = R0f.x;
PV1f.x = R7f.y + R8f.y;
PV1f.y = -(PV0f.w) + R127f.w;
R0f.z = (mul_nonIEEE(R0f.w,PV0f.y) + R1f.z);
PV1f.w = PV0f.x + -(intBitsToFloat(uf_remappedPS[0].z));
R0f.x = (mul_nonIEEE(backupReg0f,PV0f.y) + R1f.x);
PS1f = R0f.x;
// 4
PV0f.x = PV1f.w * R126f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
R126f.y = PV1f.y * R127f.z;
R126f.y = clamp(R126f.y, 0.0, 1.0);
PV0f.z = mul_nonIEEE(R7f.y, PV1f.x);
// 5
R123f.y = (mul_nonIEEE(R1f.w,PV0f.z) + intBitsToFloat(0xbd4ccccd));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
R123f.z = (intBitsToFloat(0xc0000000) * PV0f.x + intBitsToFloat(0x40400000));
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(PV0f.x, PV0f.x);
R0f.y = (mul_nonIEEE(R3f.y,R127f.y) + R1f.y);
PS1f = R0f.y;
// 6
PV0f.x = mul_nonIEEE(PV1f.y, R126f.y);
PV0f.y = mul_nonIEEE(PV1f.w, PV1f.z);
// 7
PV1f.x = mul_nonIEEE(PV0f.x, PV0f.y);
// 8
R0f.w = mul_nonIEEE(R4f.x, PV1f.x);
// export
if( ((vec4(R0f.x, R0f.y, R0f.z, R0f.w)).a > uf_alphaTestRef) == false) discard;
// passPixelColor0 = vec4(R0f.x*$Red, R0f.y*$Green, R0f.z*$Blue, R0f.w)*$Bright;
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);

	// check if we want to change a color
	if ($Red != 256 || $Green != 256 || $Blue != 256)
	{
		/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
		float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

		// Adjust brightness of greyscale
		luma = luma*$Bright;
		 
		// Normalize RGB (255,255,255) => RGB (1,1,1) system
		float rred = $Red / 255.0f;
		float ggreen = $Green / 255.0f;
		float bblue = $Blue / 255.0f;

		/* Colorize and Export */
		passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R0f.w*$Bright);
	}
	else
	{
	/* only changing brightness */
		passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w)*$Bright;
	}
}
