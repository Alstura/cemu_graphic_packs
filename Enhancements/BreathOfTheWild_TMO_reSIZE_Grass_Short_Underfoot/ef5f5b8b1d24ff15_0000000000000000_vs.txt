#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader ef5f5b8b1d24ff15
uniform ivec4 uf_remappedVS[22];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(binding = 32) uniform sampler2D textureUnitVS0;// Tex0 addr 0x433d7000 res 256x256x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler18 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 33) uniform sampler2D textureUnitVS1;// Tex1 addr 0x4322f000 res 256x256x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler19 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 34) uniform sampler2D textureUnitVS2;// Tex2 addr 0x4328f800 res 512x512x1 dim 1 tm: 1 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler20 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 35) uniform sampler2D textureUnitVS3;// Tex3 addr 0x4313c000 res 128x128x1 dim 1 tm: 4 format 001f compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler21 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 36) uniform sampler2D textureUnitVS4;// Tex4 addr 0x4315c800 res 128x128x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler22 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 37) uniform sampler2D textureUnitVS5;// Tex5 addr 0x408da800 res 320x64x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler23 ClampX/Y/Z: 1 1 2 border: 0
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 3) out vec4 passParameterSem3;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 1) out vec4 passParameterSem1;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem0.xy)/255.0);
attrDecoder.zw = uvec2(0);
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = attrDataSem1.xy;
if( (attrDecoder.x&0x80) != 0 ) attrDecoder.x |= 0xFFFFFF00;
if( (attrDecoder.y&0x80) != 0 ) attrDecoder.y |= 0xFFFFFF00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/127.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/127.0,-1.0));
attrDecoder.zw = uvec2(0);
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem2.xy));
attrDecoder.zw = uvec2(0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = floatBitsToUint(vec2(attrDataSem8.xy)/255.0);
attrDecoder.zw = uvec2(0);
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
PV0f.x = mul_nonIEEE(R4f.x, intBitsToFloat(uf_remappedVS[0].x));
PV0f.y = mul_nonIEEE(R4f.y, intBitsToFloat(uf_remappedVS[0].y));
PV0f.z = mul_nonIEEE(R4f.y, intBitsToFloat(uf_remappedVS[1].y));
PV0f.w = mul_nonIEEE(R4f.x, intBitsToFloat(uf_remappedVS[1].x));
R127f.x = R2f.x * intBitsToFloat(0x3e65a5dd);
PS0f = R127f.x;
// 1
R7f.x = intBitsToFloat(uf_remappedVS[1].z) + PV0f.w;
R7f.y = intBitsToFloat(uf_remappedVS[1].w) + PV0f.z;
R2f.z = intBitsToFloat(uf_remappedVS[0].z) + PV0f.x;
PV1f.z = R2f.z;
R3f.w = intBitsToFloat(uf_remappedVS[0].w) + PV0f.y;
PV1f.w = R3f.w;
R2f.w = 1.0;
PS1f = R2f.w;
// 2
PV0f.x = R2f.x + intBitsToFloat(uf_remappedVS[2].w);
R127f.y = mul_nonIEEE(PV1f.w, intBitsToFloat(uf_remappedVS[2].z));
PV0f.z = intBitsToFloat(uf_remappedVS[2].w) * intBitsToFloat(0x43c9d6c7);
R127f.w = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedVS[2].y));
R0f.y = intBitsToFloat(uf_remappedVS[2].x);
PS0f = R0f.y;
// 3
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(R3f.w, intBitsToFloat(uf_remappedVS[3].y));
PV1f.y = backupReg0f + PV0f.z;
R127f.z = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[3].x));
PV1f.w = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[4].y));
R1f.w = PV0f.x * intBitsToFloat(0x439d1463);
PS1f = R1f.w;
// 4
PV0f.x = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[5].x));
PV0f.y = PV1f.y + -(PV1f.w);
PV0f.z = mul_nonIEEE(R3f.w, intBitsToFloat(uf_remappedVS[4].z));
PV0f.w = -(R127f.w) + PV1f.y;
R127f.w = mul_nonIEEE(R3f.w, intBitsToFloat(uf_remappedVS[5].y));
PS0f = R127f.w;
// 5
PV1f.x = -(PV0f.z) + PV0f.y;
R4f.y = intBitsToFloat(uf_remappedVS[3].w) + R127f.x;
PV1f.z = -(R127f.y) + PV0f.w;
R4f.w = intBitsToFloat(uf_remappedVS[3].z) + R127f.z;
R6f.x = intBitsToFloat(uf_remappedVS[5].z) + PV0f.x;
PS1f = R6f.x;
// 6
R0f.x = PV1f.z * intBitsToFloat(0x3cb6a401);
R6f.y = intBitsToFloat(uf_remappedVS[5].w) + R127f.w;
PV0f.z = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[6].x));
PV0f.w = mul_nonIEEE(R3f.w, intBitsToFloat(uf_remappedVS[6].y));
R5f.x = PV1f.x * intBitsToFloat(0x3cb6a401);
PS0f = R5f.x;
// 7
R4f.x = intBitsToFloat(uf_remappedVS[6].z) + PV0f.z;
R5f.y = intBitsToFloat(uf_remappedVS[2].x);
R4f.z = intBitsToFloat(uf_remappedVS[6].w) + PV0f.w;
R0f.w = R1f.w;
R0f.w *= 4.0;
R10f.x = R2f.z;
PS1f = R10f.x;
R9f.xyzw = (texture(textureUnitVS3, R7f.xy).xyzw);
R8f.xy = (texture(textureUnitVS0, R4f.wy).xy);
R0f.x = (texture(textureUnitVS5, R0f.xy).x);
R5f.x = (texture(textureUnitVS5, R5f.xy).x);
R11f.xy = (texture(textureUnitVS2, R6f.xy).zw);
R4f.xy = (texture(textureUnitVS1, R4f.xz).xy);
R6f.yzw = (texture(textureUnitVS4, R7f.xy).xyz);
// 0
R123f.x = (R0f.w * intBitsToFloat(0x3e22f983) + 0.5);
PV0f.x = R123f.x;
R7f.y = R9f.z * intBitsToFloat(0x44480000);
PV0f.y = R7f.y;
R1f.z = R3f.w;
PV0f.z = R1f.z;
R123f.w = (R1f.w * intBitsToFloat(0x3e22f983) + 0.5);
PV0f.w = R123f.w;
R127f.x = R10f.x + -(intBitsToFloat(uf_remappedVS[7].x));
PS0f = R127f.x;
// 1
PV1f.x = fract(PV0f.x);
R127f.y = PV0f.y + -(intBitsToFloat(uf_remappedVS[7].y));
R127f.z = PV0f.z + -(intBitsToFloat(uf_remappedVS[7].z));
R127f.w = fract(PV0f.w);
R126f.y = R8f.y;
R126f.y *= 2.0;
PS1f = R126f.y;
// 2
tempf.x = dot(vec4(R10f.x,R7f.y,R1f.z,R2f.w),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.w = (PV1f.x * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb));
PS0f = R126f.w;
// 3
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,-0.0),vec4(R127f.x,R127f.y,R127f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = max(PV0f.x, -(PV0f.x));
// 4
R123f.x = (R127f.w * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb));
PV0f.x = R123f.x;
R127f.y = intBitsToFloat(uf_remappedVS[2].x) + intBitsToFloat(0xbe99999a);
R127f.y = clamp(R127f.y, 0.0, 1.0);
PV0f.z = -(intBitsToFloat(uf_remappedVS[2].x)) + 1.0;
PV0f.w = PS1f * intBitsToFloat(0x3f4ccccd);
PV0f.w = clamp(PV0f.w, 0.0, 1.0);
R0f.w = sqrt(PV1f.x);
PS0f = R0f.w;
// 5
PV1f.x = R126f.w * intBitsToFloat(0x3e22f983);
PV1f.y = min(intBitsToFloat(uf_remappedVS[2].x), PV0f.z);
PV1f.y *= 2.0;
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R127f.z = PV0f.x * intBitsToFloat(0x3e22f983);
R126f.w = -(PV0f.w) + 1.0;
R127f.w = -(PS0f) + intBitsToFloat(0x40f00000);
PS1f = R127f.w;
// 6
backupReg0f = R127f.y;
R127f.x = R8f.x;
R127f.x *= 2.0;
R127f.y = R126f.y + -(1.0);
PV0f.z = backupReg0f * intBitsToFloat(0x3d6a0fd3);
R125f.w = PV1f.y * intBitsToFloat(0x3ca3d70a);
PS0f = sin((PV1f.x)/0.1591549367);
// 7
backupReg0f = R127f.w;
backupReg1f = R127f.z;
R126f.x = R11f.y;
R126f.x /= 2.0;
R126f.y = mul_nonIEEE(PV0f.z, PS0f);
R127f.z = mul_nonIEEE(R126f.w, intBitsToFloat(uf_remappedVS[9].w));
R127f.w = backupReg0f * intBitsToFloat(0x3de38e39);
R127f.w = clamp(R127f.w, 0.0, 1.0);
PS1f = sin((backupReg1f)/0.1591549367);
// 8
backupReg0f = R0f.x;
backupReg1f = R127f.y;
PV0f.x = mul_nonIEEE(R125f.w, PS1f);
R127f.y = R5f.x;
R127f.y *= 2.0;
R125f.z = mul_nonIEEE(R4f.x, R4f.y);
R125f.w = backupReg0f;
R125f.w *= 2.0;
R126f.z = -(backupReg1f);
PS0f = R126f.z;
// 9
backupReg0f = R126f.y;
backupReg1f = R127f.z;
PV1f.x = R127f.x + -(1.0);
R126f.y = R126f.x + 0.5;
PV1f.y = R126f.y;
R127f.z = backupReg0f + PV0f.x;
PV1f.w = -(backupReg1f) + 1.0;
PS1f = -(R127f.w) + 1.0;
// 10
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), R125f.w);
PV0f.y = R2f.y;
PV0f.y /= 2.0;
R124f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), R127f.y);
R125f.w = max(PV1f.w, PS1f);
R127f.w = mul_nonIEEE(PV1f.x, PV1f.y);
PS0f = R127f.w;
// 11
backupReg0f = R126f.z;
PV1f.x = mul_nonIEEE(R126f.y, R125f.z);
PV1f.y = mul_nonIEEE(R9f.w, intBitsToFloat(uf_remappedVS[9].y));
R126f.z = mul_nonIEEE(backupReg0f, R126f.y);
PV1f.z = R126f.z;
PV1f.w = PV0f.y + intBitsToFloat(0x3f400000);
R127f.x = R127f.z + PV0f.x;
PS1f = R127f.x;
// 12
PV0f.x = mul_nonIEEE(PV1f.w, PV1f.y);
R126f.y = mul_nonIEEE(PV1f.z, PV1f.z);
PV0f.z = R127f.z + R124f.z;
PV0f.w = mul_nonIEEE(PV1f.x, R125f.w);
R127f.y = mul_nonIEEE(R127f.w, R127f.w);
PS0f = R127f.y;
// 13
PV1f.x = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedVS[10].w));
PV1f.y = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedVS[10].z));
PV1f.z = mul_nonIEEE(R127f.x, intBitsToFloat(uf_remappedVS[10].y));
PV1f.w = mul_nonIEEE(R127f.x, intBitsToFloat(uf_remappedVS[10].x));
R125f.y = mul_nonIEEE(PV0f.w, PV0f.x);
PS1f = R125f.y;
// 14
backupReg0f = R127f.y;
PV0f.x = PV1f.y + PV1f.w;
R127f.y = PV1f.x + PV1f.z;
PV0f.z = intBitsToFloat(uf_remappedVS[9].z) + intBitsToFloat(0xbf1eb852);
PV0f.w = R126f.y + backupReg0f;
R127f.x = R3f.x;
R127f.x *= 2.0;
PS0f = R127f.x;
// 15
PV1f.x = -(PV0f.w) + 1.0;
R126f.y = (mul_nonIEEE(PV0f.z,R11f.y) + intBitsToFloat(0x3f1eb852));
PV1f.z = R3f.y;
PV1f.z *= 2.0;
PV1f.w = R125f.y;
PV1f.w /= 2.0;
R125f.w = mul_nonIEEE(R11f.y, PV0f.x);
PS1f = R125f.w;
// 16
backupReg0f = R126f.z;
PV0f.x = mul_nonIEEE(R11f.y, R127f.y);
R3f.y = R127f.w + R127f.x;
PV0f.y = R3f.y;
R126f.z = PV1f.w + intBitsToFloat(0x38d1b717);
PV0f.z = R126f.z;
R2f.w = backupReg0f + PV1f.z;
PS0f = max(PV1f.x, intBitsToFloat(0x3e4ccccd));
// 17
PV1f.x = R125f.w;
PV1f.y = PV0f.x;
PV1f.z = mul_nonIEEE(-(R125f.y), R126f.y);
R125f.w = mul_nonIEEE(PV0f.y, PV0f.z);
R127f.w = mul_nonIEEE(R125f.y, PS0f);
PS1f = R127f.w;
// 18
PV0f.x = mul_nonIEEE(R2f.w, R126f.z);
PV0f.y = PV1f.z * intBitsToFloat(0x3fa66666);
PV0f.z = PV1f.y * intBitsToFloat(0x3fa66666);
PV0f.w = PV1f.x * intBitsToFloat(0x3fa66666);
R127f.x = -(R9f.w) + 2.0;
R127f.x /= 2.0;
PS0f = R127f.x;
// 19
R3f.x = R125f.w + PV0f.w;
R4f.y = R127f.w + PV0f.y;
R0f.z = PV0f.x + PV0f.z;
PV1f.w = mul_nonIEEE(R9f.w, intBitsToFloat(uf_remappedVS[9].x));
R4f.z = mul_nonIEEE(R1f.y, R125f.y);
PS1f = R4f.z;
// 20
backupReg0f = R9f.x;
R9f.x = 1.0;
R8f.y = (backupReg0f * 2.0 + -(1.0));
PV0f.z = mul_nonIEEE(R127f.x, PV1f.w);
R9f.w = 1.0;
R1f.w = (R9f.y * 2.0 + -(1.0));
PS0f = R1f.w;
// 21
backupReg0f = R0f.z;
backupReg0f = R0f.z;
tempf.x = dot(vec4(R3f.x,R4f.y,backupReg0f,-0.0),vec4(R3f.x,R4f.y,backupReg0f,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R9f.y = tempf.x;
R2f.y = PV0f.z + intBitsToFloat(0x38d1b717);
PS1f = R2f.y;
// 0
R127f.x = mul_nonIEEE(R3f.y, R2f.y);
PV0f.x = R127f.x;
PV0f.y = intBitsToFloat(uf_remappedVS[11].x) + -(1.0);
R127f.z = (mul_nonIEEE(-(R0f.w),intBitsToFloat(uf_remappedVS[11].y)) + intBitsToFloat(uf_remappedVS[11].x));
R127f.w = mul_nonIEEE(-(R2f.w), R2f.y);
PV0f.w = R127f.w;
tempResultf = 1.0 / sqrt(R9f.y);
PS0f = tempResultf;
// 1
PV1f.x = mul_nonIEEE(R1f.x, PV0f.x);
PV1f.y = mul_nonIEEE(R1f.x, PV0f.w);
R126f.z = mul_nonIEEE(R8f.y, R8f.y);
PV1f.w = mul_nonIEEE(R4f.z, PS0f);
R126f.x = 1.0 / PV0f.y;
PS1f = R126f.x;
// 2

backupReg0f = R127f.x;
backupReg1f = R127f.w;
// Scaling
// R127f.x = mul_nonIEEE(R0f.z, PV1f.w)*8; // spread out distance from under feet - one direction
R127f.x = mul_nonIEEE(R0f.z, PV1f.w)*$Bright;
PV0f.x = R127f.x;
// R125f.y = -(backupReg0f) + PV1f.x*8; // blade width
R125f.y = -(backupReg0f) + PV1f.x*$Bright;
// R124f.z = mul_nonIEEE(R3f.x, PV1f.w)*8; // spread out distance from under feet - other direction
R124f.z = mul_nonIEEE(R3f.x, PV1f.w)*$Bright;
PV0f.z = R124f.z;
// R127f.w = -(backupReg1f) + PV1f.y *8; // other blade width
R127f.w = -(backupReg1f) + PV1f.y*$Bright;
// R124f.y = mul_nonIEEE(R4f.y, PV1f.w)*8; // blade height
R124f.y = mul_nonIEEE(R4f.y, PV1f.w)*$Bright;
PS0f = R124f.y;
// 3
R123f.x = (mul_nonIEEE(R1f.w,R1f.w) + R126f.z);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
R127f.y = R7f.y + PS0f;
PV1f.z = R1f.z + PV0f.x;
PV1f.w = R10f.x + PV0f.z;
R126f.y = R1f.y * intBitsToFloat(0x3eaaaaab);
R126f.y = clamp(R126f.y, 0.0, 1.0);
PS1f = R126f.y;
// 4
backupReg0f = R125f.y;
backupReg1f = R127f.z;
backupReg2f = R126f.x;
backupReg2f = R126f.x;
R126f.x = PV1f.w + R127f.w;
PV0f.x = R126f.x;
R125f.y = R8f.y;
R127f.z = PV1f.z + backupReg0f;
PV0f.z = R127f.z;
R0f.w = (mul_nonIEEE(backupReg1f,backupReg2f) + -(backupReg2f));
R0f.w = clamp(R0f.w, 0.0, 1.0);
R126f.z = -(PV1f.x) + 1.0;
PS0f = R126f.z;
// 5
R7f.x = dot(vec4(PV0f.x,R127f.y,PV0f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].w)));
PV1f.x = R7f.x;
PV1f.y = R7f.x;
PV1f.z = R7f.x;
PV1f.w = R7f.x;
R127f.w = intBitsToFloat(0x3e99999a) * R126f.y;
PS1f = R127f.w;
// 6
tempf.x = dot(vec4(R126f.x,R127f.y,R127f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R7f.y = tempf.x;
R125f.x = (mul_nonIEEE(PS1f,R124f.z) + R125f.y);
PS0f = R125f.x;
// 7
tempf.x = dot(vec4(R126f.x,R127f.y,R127f.z,R9f.w),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R7f.z = tempf.x;
PS1f = sqrt(R126f.z);
// 8
R8f.x = dot(vec4(R7f.x,R7f.y,PV1f.x,R9f.x),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),intBitsToFloat(uf_remappedVS[15].w)));
PV0f.x = R8f.x;
PV0f.y = R8f.x;
PV0f.z = R8f.x;
PV0f.w = R8f.x;
R127f.z = (mul_nonIEEE(R127f.w,R124f.y) + PS1f);
PS0f = R127f.z;
// 9
tempf.x = dot(vec4(R7f.x,R7f.y,R7f.z,R9f.x),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R8f.y = tempf.x;
PS1f = R1f.w;
// 10
tempf.x = dot(vec4(R7f.x,R7f.y,R7f.z,R9f.x),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R8f.z = tempf.x;
R127f.y = (mul_nonIEEE(R127f.w,R127f.x) + PS1f);
PS0f = R127f.y;
// 11
tempf.x = dot(vec4(R7f.x,R7f.y,R7f.z,R9f.x),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R8f.w = tempf.x;
R1f.w = (mul_nonIEEE(R6f.y,R11f.x) + intBitsToFloat(0xbdc0b780));
PS1f = R1f.w;
// 12
R9f.x = (mul_nonIEEE(R6f.z,R11f.x) + intBitsToFloat(0xbe50e560));
R6f.y = (mul_nonIEEE(R6f.w,R11f.x) + intBitsToFloat(0xbd009d49));
PV0f.z = mul_nonIEEE(R125f.x, intBitsToFloat(uf_remappedVS[12].x));
R127f.w = mul_nonIEEE(R125f.x, intBitsToFloat(uf_remappedVS[13].x));
R10f.x = R1f.x;
R10f.x /= 2.0;
PS0f = R10f.x;
// 13
R6f.x = R11f.y;
R124f.y = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[12].y)) + PV0f.z);
PV1f.z = mul_nonIEEE(R125f.x, intBitsToFloat(uf_remappedVS[14].x));
R11f.w = (R11f.x * 4.0 + -(1.0));
R11f.w = clamp(R11f.w, 0.0, 1.0);
R10f.y = (R1f.y * intBitsToFloat(0xbeaaaa3b) + 1.0);
PS1f = R10f.y;
// 14
R123f.x = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[13].y)) + R127f.w);
PV0f.x = R123f.x;
R125f.y = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedVS[14].y)) + PV1f.z);
// 15
R1f.x = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[12].z)) + R124f.y);
R1f.y = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[13].z)) + PV0f.x);
// 16
R1f.z = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedVS[14].z)) + R125f.y);
// export
gl_Position = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
// export
passParameterSem3 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
// skipped export to semanticId 255
// 0
R11f.x = (mul_nonIEEE(R1f.w,-(intBitsToFloat(uf_remappedVS[19].y))) + R1f.w);
PV0f.y = -(R0f.w) + intBitsToFloat(uf_remappedVS[20].w);
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R11f.z = (mul_nonIEEE(R6f.y,-(intBitsToFloat(uf_remappedVS[19].y))) + R6f.y);
R11f.y = (mul_nonIEEE(R9f.x,-(intBitsToFloat(uf_remappedVS[19].y))) + R9f.x);
PS0f = R11f.y;
// 1
PV1f.w = mul_nonIEEE(PV0f.y, PV0f.y);
// 2
R123f.x = (mul_nonIEEE(PV1f.w,-(intBitsToFloat(uf_remappedVS[19].y))) + PV1f.w);
PV0f.x = R123f.x;
// 3
R6f.w = PV0f.x;
// export
passParameterSem0 = vec4(R11f.x, R11f.y, R11f.z, R11f.w);
// export
passParameterSem2 = vec4(R6f.x, R6f.y, R6f.y, R6f.w);
// 0
R123f.y = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[21].x)) + intBitsToFloat(uf_remappedVS[21].z));
PV0f.y = R123f.y;
R123f.w = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedVS[21].y)) + intBitsToFloat(uf_remappedVS[21].w));
PV0f.w = R123f.w;
// 1
R10f.z = PV0f.y;
R10f.w = PV0f.w;
// export
passParameterSem1 = vec4(R10f.x, R10f.y, R10f.z, R10f.w);
}
