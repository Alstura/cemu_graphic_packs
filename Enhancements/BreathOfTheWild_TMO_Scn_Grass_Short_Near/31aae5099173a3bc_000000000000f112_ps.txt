#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 31aae5099173a3bc
// flowers in grass
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
layout(binding = 3) uniform sampler2DArray textureUnitPS3;// Tex3 addr 0xac3f5000 res 32x32x18 dim 5 tm: 2 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x12) Sampler3 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem3;
// 0
PV0f.x = R0f.z;
R2f.y = R2f.w;
PV0f.z = intBitsToFloat(0x3c808081);
R2f.w = R2f.z;
PS0f = intBitsToFloat(uf_remappedPS[0].z);
// 1
R6f.x = PV0f.z;
R6f.y = PS0f;
R2f.z = roundEven(PV0f.x);
R5f.w = 0.0;
R4f.x = (R3f.x * 0.5 + 0.5);
PS1f = R4f.x;
R2f.xyzw = (texture(textureUnitPS3, vec3(R2f.w,R2f.y,R2f.z)).xyzw);
// 0
R127f.x = mul_nonIEEE(R2f.z, R2f.z);
PV0f.x = R127f.x;
R127f.y = mul_nonIEEE(R2f.y, R2f.y);
PV0f.y = R127f.y;
R6f.z = mul_nonIEEE(R0f.x, R2f.w);
R127f.w = mul_nonIEEE(R2f.x, R2f.x);
PV0f.w = R127f.w;
R4f.y = (R3f.y * 0.5 + 0.5);
PS0f = R4f.y;
// 1
PV1f.y = R1f.z + -(PV0f.x);
PV1f.z = R1f.x + -(PV0f.w);
PV1f.w = R1f.y + -(PV0f.y);
R4f.z = (R3f.z * 0.5 + 0.5);
PS1f = R4f.z;
// 2
R5f.x = (mul_nonIEEE(PV1f.z,R0f.w) + R127f.w);
R5f.y = (mul_nonIEEE(PV1f.w,R0f.w) + R127f.y);
R5f.z = (mul_nonIEEE(PV1f.y,R0f.w) + R127f.x);
R4f.w = 0.0;
PV0f.w = R4f.w;
// 3
R2f.xyz = vec3(R4f.x,R4f.y,R4f.z);
R2f.w = PV0f.w;
// 4
R1f.xyz = vec3(R5f.x,R5f.y,R5f.z);
R1f.w = R5f.w;
// 5
R0f.xyz = vec3(R6f.x,R6f.y,R6f.z);
R0f.w = R6f.z;
// export
if( ((vec4(R0f.x, R0f.y, R0f.z, R0f.w)).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor3 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);

/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
}

}
