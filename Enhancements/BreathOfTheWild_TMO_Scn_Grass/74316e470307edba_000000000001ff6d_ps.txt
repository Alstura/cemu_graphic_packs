#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 74316e470307edba
// grass generation
uniform ivec4 uf_remappedPS[14];
layout(binding = 0) uniform sampler2DArray textureUnitPS0;// Tex0 addr 0xaba42000 res 64x64x8 dim 5 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x8) Sampler0 ClampX/Y/Z: 0 0 2 border: 1
layout(binding = 1) uniform sampler2DArray textureUnitPS1;// Tex1 addr 0xa9500800 res 1024x1024x8 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x8) Sampler1 ClampX/Y/Z: 0 0 2 border: 1
layout(binding = 2) uniform sampler2DArray textureUnitPS2;// Tex2 addr 0xaaa41000 res 512x512x8 dim 5 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x8) Sampler2 ClampX/Y/Z: 0 0 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
if( activeMaskStackC[1] == true ) {
// 0
R1f.x = (mul_nonIEEE(R0f.x,intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[0].z));
PV0f.x = R1f.x;
R1f.y = (mul_nonIEEE(R0f.y,intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[0].w));
PV0f.y = R1f.y;
// 1
PV1f.x = intBitsToFloat(uf_remappedPS[1].x);
PV1f.y = PV0f.x + -(0.5);
PV1f.z = PV0f.y + -(0.5);
R0f.w = intBitsToFloat(uf_remappedPS[1].y);
// 2
R0f.x = (mul_nonIEEE(R1f.x,intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(uf_remappedPS[2].z));
R0f.y = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(uf_remappedPS[2].w));
R0f.z = roundEven(PV1f.x);
R1f.w = max(PV1f.y, -(PV1f.y));
R1f.z = max(PV1f.z, -(PV1f.z));
PS0f = R1f.z;
}
if( activeMaskStackC[1] == true ) {
R4f.w = (textureLod(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z),R0f.w).x);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R2f.x = (mul_nonIEEE(R1f.x,intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[3].z));
PV0f.y = max(R1f.w, R1f.z);
R2f.y = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(uf_remappedPS[3].w));
PS0f = R2f.y;
// 1
R3f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z),PV0f.y) + intBitsToFloat(uf_remappedPS[4].w));
R3f.z = clamp(R3f.z, 0.0, 1.0);
// 2
predResult = (R3f.z > intBitsToFloat(0x3c23d70a));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0f.y = intBitsToFloat(uf_remappedPS[5].x);
R0f.w = intBitsToFloat(uf_remappedPS[5].y);
// 1
R0f.x = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[6].z));
R0f.y = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[6].y)) + intBitsToFloat(uf_remappedPS[6].w));
R0f.z = roundEven(PV0f.y);
}
if( activeMaskStackC[2] == true ) {
R0f.z = (textureLod(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z),R0f.w).x);
}
if( activeMaskStackC[2] == true ) {
// 0
PV0f.x = -(R4f.w) + R0f.z;
// 1
backupReg0f = R4f.w;
R4f.w = (mul_nonIEEE(PV0f.x,R3f.z) + backupReg0f);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0f.y = intBitsToFloat(uf_remappedPS[7].x);
PV0f.w = intBitsToFloat(uf_remappedPS[8].x);
R3f.w = 1.0;
PS0f = R3f.w;
// 1
R0f.x = (mul_nonIEEE(R1f.x,intBitsToFloat(uf_remappedPS[9].x)) + intBitsToFloat(uf_remappedPS[9].z));
R0f.y = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[9].y)) + intBitsToFloat(uf_remappedPS[9].w));
R0f.z = roundEven(PV0f.y);
R1f.w = roundEven(PV0f.w);
// 2
PV0f.z = intBitsToFloat(uf_remappedPS[10].x);
// 3
backupReg0f = R1f.x;
backupReg1f = R1f.y;
R1f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[11].x)) + intBitsToFloat(uf_remappedPS[11].z));
R1f.y = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[11].y)) + intBitsToFloat(uf_remappedPS[11].w));
R2f.z = roundEven(PV0f.z);
// 4
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(uf_remappedPS[12].z));
R2f.y = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(uf_remappedPS[12].w));
}
if( activeMaskStackC[1] == true ) {
R0f.xy = (texture(textureUnitPS2, vec3(R0f.x,R0f.y,R0f.z)).xy);
R1f.xyzw = (texture(textureUnitPS0, vec3(R1f.x,R1f.y,R1f.w)).xyzw);
R2f.xyzw = (texture(textureUnitPS0, vec3(R2f.x,R2f.y,R2f.z)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0f = R0f.y;
R127f.x = (R0f.x * 2.0 + -(1.0));
PV0f.x = R127f.x;
PV0f.y = -(R1f.x) + R2f.x;
PV0f.z = -(R1f.y) + R2f.y;
R127f.w = (backupReg0f * 2.0 + -(1.0));
PS0f = -(R1f.z) + R2f.z;
// 1
PV1f.x = -(R1f.w) + R2f.w;
R123f.y = (mul_nonIEEE(PV0f.y,R3f.z) + R1f.x);
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(PV0f.x, PV0f.x);
R126f.w = (mul_nonIEEE(PV0f.z,R3f.z) + R1f.y);
R125f.w = (mul_nonIEEE(PS0f,R3f.z) + R1f.z);
PS1f = R125f.w;
// 2
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(R4f.w, intBitsToFloat(uf_remappedPS[13].y));
R123f.y = (mul_nonIEEE(R127f.w,R127f.w) + PV1f.z);
PV0f.y = R123f.y;
R127f.z = (mul_nonIEEE(PV1f.x,R3f.z) + R1f.w);
PV0f.w = PV1f.y * intBitsToFloat(0x41200000);
R1f.x = (backupReg0f * 0.5 + 0.5);
PS0f = R1f.x;
// 3
R126f.x = -(PV0f.y) + 1.0;
R126f.x = clamp(R126f.x, 0.0, 1.0);
PV1f.y = PV0f.w + intBitsToFloat(0xc0900000);
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
PV1f.z = PV0f.w + intBitsToFloat(0xc0d00000);
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
PV1f.w = PV0f.w + intBitsToFloat(0xc1080000);
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
R1f.y = (R127f.w * 0.5 + 0.5);
PS1f = R1f.y;
// 4
tempf.x = dot(vec4(PV1f.y,PV1f.z,PV1f.w,-0.0),vec4(intBitsToFloat(0x3e99999a),intBitsToFloat(0x3e99999a),intBitsToFloat(0x3ecccccd),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R1f.z = R127f.x * intBitsToFloat(0x3aa3d70a);
R1f.z = clamp(R1f.z, 0.0, 1.0);
PS0f = R1f.z;
// 5
R3f.xyz = vec3(R126f.w,R125f.w,R127f.z);
PS1f = sqrt(R126f.x);
// 6
R123f.x = (PS1f * intBitsToFloat(0x41200000) + intBitsToFloat(0xc0c66666));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
// 7
R1f.w = mul_nonIEEE(R127f.y, PV0f.x);
// 8
backupReg0f = R3f.x;
backupReg1f = R3f.y;
backupReg2f = R3f.z;
backupReg3f = R3f.w;
R3f.xyz = vec3(backupReg0f,backupReg1f,backupReg2f);
R3f.w = backupReg3f;
// 9
R2f.xyz = vec3(R1f.x,R1f.y,R1f.z);
R2f.w = R1f.w;
}
// export
// z gives som location info
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// color
// passPixelColor1 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
passPixelColor1 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);

// check if we want to change a color
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	// Adjust brightness of greyscale
	luma = luma*$Bright;
	 
	// Normalize RGB (255,255,255) => RGB (1,1,1) system
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor1.rgb = vec3(luma*rred, luma*ggreen, luma*bblue);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w)*$Bright;
}

}
