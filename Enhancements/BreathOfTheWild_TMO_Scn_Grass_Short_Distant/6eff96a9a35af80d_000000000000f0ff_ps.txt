#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6eff96a9a35af80d
uniform ivec4 uf_remappedPS[1];
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
// 0
backupReg0f = R0f.w;
PV0f.x = intBitsToFloat(0x3c808081);
PV0f.y = R0f.w;
PV0f.z = intBitsToFloat(uf_remappedPS[0].z);
PV0f.w = backupReg0f * intBitsToFloat(0x42800000);
PV0f.w /= 2.0;
R3f.w = 1.0;
PS0f = R3f.w;
// 1
R3f.x = PV0f.x;
R3f.y = PV0f.z;
PV1f.z = mul_nonIEEE(PV0f.w, PV0f.y);
R0f.w = 0.0;
R2f.x = (R1f.x * 0.5 + 0.5);
PS1f = R2f.x;
// 2
PV0f.y = PV1f.z * intBitsToFloat(0x3f7f0000);
R2f.z = (R1f.z * 0.5 + 0.5);
R2f.y = (R1f.y * 0.5 + 0.5);
PS0f = R2f.y;
// 3
PV1f.x = floor(PV0f.y);
PV1f.x *= 4.0;
// 4
R2f.w = PV1f.x * intBitsToFloat(0x3b808081);
PV0f.w = R2f.w;
// 5
R6f.xyz = vec3(R2f.x,R2f.y,R2f.z);
R6f.w = PV0f.w;
// 6
R5f.xyz = vec3(R0f.x,R0f.y,R0f.z);
R5f.w = R0f.w;
// 7
R4f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R4f.w = R3f.w;
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
passPixelColor1 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
passPixelColor3 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);


/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R5f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(R5f.x, R5f.y, R5f.z, R5f.w)*$Bright;
}
}
