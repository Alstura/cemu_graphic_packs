#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader fb2d0efc923bf516
layout(binding = 33, std140) uniform uniformBlockPS1
{
vec4 uf_blockPS1[1024];
};

layout(binding = 38, std140) uniform uniformBlockPS6
{
vec4 uf_blockPS6[1024];
};

layout(binding = 40, std140) uniform uniformBlockPS8
{
vec4 uf_blockPS8[1024];
};

layout(binding = 43, std140) uniform uniformBlockPS11
{
vec4 uf_blockPS11[1024];
};

layout(binding = 44, std140) uniform uniformBlockPS12
{
vec4 uf_blockPS12[1024];
};

layout(binding = 45, std140) uniform uniformBlockPS13
{
vec4 uf_blockPS13[1024];
};

layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 7) uniform sampler2DArray textureUnitPS7;// Tex7 addr 0xab241800 res 512x512x8 dim 5 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x8) Sampler7 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 8) uniform sampler2DArray textureUnitPS8;// Tex8 addr 0xaaa41000 res 512x512x8 dim 5 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x8) Sampler8 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 9) uniform sampler2DArray textureUnitPS9;// Tex9 addr 0x308e3000 res 1024x1024x83 dim 5 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x53) Sampler9 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 10) uniform sampler2DArray textureUnitPS10;// Tex10 addr 0x31e86000 res 512x512x83 dim 5 tm: 4 format 0031 compSel: 0 1 2 2 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x53) Sampler10 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 7) out vec4 passPixelColor7;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R5i = floatBitsToInt(passParameterSem5);
if( activeMaskStackC[1] == true ) {
// 0
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), uf_blockPS6[43].x));
PV0i.w = floatBitsToInt(uf_blockPS12[12].x);
R6i.w = floatBitsToInt(1.0 / intBitsToFloat(R5i.w));
PS0i = R6i.w;
// 1
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),uf_blockPS12[14].x) + uf_blockPS12[14].z));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),uf_blockPS12[14].y) + uf_blockPS12[14].w));
R6i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.w)));
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PS0i)));
PS1i = R10i.x;
}
if( activeMaskStackC[1] == true ) {
R7i.xyzw = floatBitsToInt(texture(textureUnitPS8, vec3(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z))).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R6i.x = floatBitsToInt((intBitsToFloat(R7i.x) * 2.0 + -(1.0)));
PV0i.x = R6i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),uf_blockPS6[43].y) + intBitsToFloat(R5i.z)));
PV0i.y = R123i.y;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), uf_blockPS6[45].x));
R6i.y = floatBitsToInt((intBitsToFloat(R7i.y) * 2.0 + -(1.0)));
PS0i = R6i.y;
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),uf_blockPS6[43].z) + intBitsToFloat(PV0i.y)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R6i.w)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),uf_blockPS6[45].y) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R11i.x = PV0i.x;
PS1i = R11i.x;
// 2
R12i.x = floatBitsToInt(uf_blockPS1[0].y);
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),uf_blockPS6[45].z) + intBitsToFloat(PV1i.z)));
R10i.z = R6i.y;
R13i.x = R7i.z;
PS0i = R13i.x;
// 3
R2i.y = floatBitsToInt(uf_blockPS1[1].y);
R12i.z = floatBitsToInt(uf_blockPS1[2].y);
R13i.y = R7i.w;
PS1i = R13i.y;
// 4
R7i.x = floatBitsToInt(uf_blockPS6[43].w + intBitsToFloat(R127i.x));
R8i.z = floatBitsToInt(uf_blockPS6[45].w + intBitsToFloat(R127i.y));
// 5
R11i.z = floatBitsToInt(intBitsToFloat(R3i.z) + uf_blockPS1[14].x);
// 6
predResult = (intBitsToFloat(R0i.w) > 0.5);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),uf_blockPS13[14].x) + uf_blockPS13[14].z));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),uf_blockPS13[14].y) + uf_blockPS13[14].w));
// 1
R1i.z = floatBitsToInt(uf_blockPS13[12].x);
PV1i.z = R1i.z;
// 2
R5i.z = floatBitsToInt(roundEven(intBitsToFloat(PV1i.z)));
}
if( activeMaskStackC[2] == true ) {
R5i.xyzw = floatBitsToInt(texture(textureUnitPS8, vec3(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z))).xyzw);

}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R7i.z)) + intBitsToFloat(R5i.z));
R123i.y = floatBitsToInt((intBitsToFloat(R5i.x) * 2.0 + -(1.0)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(-(intBitsToFloat(R7i.w)) + intBitsToFloat(R5i.w));
R123i.w = floatBitsToInt((intBitsToFloat(R5i.y) * 2.0 + -(1.0)));
PV0i.w = R123i.w;
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R6i.y)) + intBitsToFloat(PV0i.w));
R13i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R0i.w)) + intBitsToFloat(R7i.z)));
PS1i = R13i.x;
// 2
R11i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R0i.w)) + intBitsToFloat(R6i.x)));
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R0i.w)) + intBitsToFloat(R7i.w)));
R10i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(R6i.y)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.x;
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg1i = R0i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R0i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(backupReg1i)));
PV0i.w = floatBitsToInt(uf_blockPS12[17].x);
R0i.w = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(R4i.z));
PS0i = R0i.w;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),uf_blockPS12[19].x) + uf_blockPS12[19].z));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),uf_blockPS12[19].y) + uf_blockPS12[19].w));
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.w)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(PV0i.x)));
R0i.x = floatBitsToInt(max(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.x)));
PS1i = R0i.x;
}
if( activeMaskStackC[1] == true ) {
R1i.xy = floatBitsToInt(texture(textureUnitPS7, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z))).xy);
R2i.w = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R10i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
// 0
R123i.x = ((intBitsToFloat(R1i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(0x437f0000) + 0.5));
R123i.z = floatBitsToInt((intBitsToFloat(R1i.x) * intBitsToFloat(0x437f0000) + 0.5));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(R0i.z)) + intBitsToFloat(R0i.x));
PS0i = floatBitsToInt(-(intBitsToFloat(R4i.y)));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(PV0i.x)) + intBitsToFloat(R4i.x)));
PV1i.x = R123i.x;
R126i.y = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R126i.y;
PV1i.z = floatBitsToInt(-(intBitsToFloat(R4i.z)) + intBitsToFloat(PS0i));
PV1i.w = R13i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 2.0);
PS1i = int(intBitsToFloat(PV0i.z));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.y)) + intBitsToFloat(R4i.z)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.x));
R1i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
R1i.z = clampFI32(R1i.z);
R0i.w = PS1i + 0x00000009;
PS0i = int(intBitsToFloat(R127i.y));
// 3
R0i.x = floatBitsToInt(-(intBitsToFloat(R4i.z)) + intBitsToFloat(PV0i.x));
R1i.y = floatBitsToInt(uf_blockPS1[11].w);
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(R4i.x)));
R1i.w = PS0i + 0x00000009;
R2i.z = floatBitsToInt(uf_blockPS1[13].w);
PS1i = R2i.z;
}
if( activeMaskStackC[1] == true ) {
R5i.xyzw = floatBitsToInt(uf_blockPS11[R0i.w].xyzw);
R6i.xyzw = floatBitsToInt(uf_blockPS11[R1i.w].xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
R127i.x = floatBitsToInt(fract(intBitsToFloat(R5i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(R1i.z)) + intBitsToFloat(R4i.z)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(backupReg0i));
R127i.w = floatBitsToInt(fract(intBitsToFloat(R6i.w)));
R126i.x = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R1i.y)));
PS0i = R126i.x;
// 1
PV1i.x = R6i.z;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R5i.y)));
PV1i.z = R5i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R1i.z)) + intBitsToFloat(R4i.x)));
PV1i.w = R123i.w;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R6i.y)));
PS1i = R4i.y;
// 2
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R5i.x)));
PV0i.x = R1i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(R127i.x)));
R1i.z = floatBitsToInt(roundEven(intBitsToFloat(PV1i.z)));
R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R6i.x)));
R4i.z = floatBitsToInt(roundEven(intBitsToFloat(PV1i.x)));
PS0i = R4i.z;
// 3
backupReg0i = R2i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(R6i.w) + -(intBitsToFloat(R127i.w)));
R6i.y = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(0x3e06dfc6));
R2i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x39800000));
PV1i.z = R2i.z;
R1i.w = floatBitsToInt(intBitsToFloat(R8i.z) + -(intBitsToFloat(backupReg0i)));
R6i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e06dfc6));
PS1i = R6i.x;
// 4
R5i.x = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(0x3e06dfc6));
R5i.y = floatBitsToInt(intBitsToFloat(R4i.y) * intBitsToFloat(0x3e06dfc6));
R6i.z = R1i.z;
R0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x39800000));
PV0i.w = R0i.w;
R6i.w = floatBitsToInt((intBitsToFloat(0xc0600000) * intBitsToFloat(PV1i.z) + intBitsToFloat(0x40400000)));
PS0i = R6i.w;
// 5
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.x), intBitsToFloat(R11i.x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R126i.x)));
R5i.z = R4i.z;
R5i.w = floatBitsToInt((intBitsToFloat(0xc0600000) * intBitsToFloat(PV0i.w) + intBitsToFloat(0x40400000)));
R0i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS1[0].x, intBitsToFloat(R11i.x)));
PS1i = R0i.x;
}
if( activeMaskStackC[1] == true ) {
R8i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z))).xyz);
R7i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R4i.w),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z))).xyz);
R6i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z)),intBitsToFloat(R6i.w)).xyz);
R5i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z)),intBitsToFloat(R5i.w)).xyz);
R9i.xyz = floatBitsToInt(texture(textureUnitPS9, vec3(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z))).xyz);
// colorize logic here for texture in R9i seems to be ground//

R1i.xyz = floatBitsToInt(texture(textureUnitPS9, vec3(intBitsToFloat(R4i.w),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z))).xyz);
// R1i.x = R1i.x*8;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R8i.y)) + intBitsToFloat(R7i.y));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(R10i.z)) + intBitsToFloat(R4i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(R1i.w)) + intBitsToFloat(R0i.y)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(R8i.x)) + intBitsToFloat(R7i.x));
R126i.y = floatBitsToInt(-(intBitsToFloat(R2i.z)) + intBitsToFloat(backupReg0i));
PS0i = R126i.y;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R13i.x)) + intBitsToFloat(R8i.x)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PV1i.y = clampFI32(PV1i.y);
R0i.z = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x378bcf65) + intBitsToFloat(0xbd2aaaab)));
R0i.z = clampFI32(R0i.z);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R13i.x)) + intBitsToFloat(R8i.y)));
PV1i.w = R123i.w;
R126i.w = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PS1i = R126i.w;
// 2
R126i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R127i.y = floatBitsToInt((intBitsToFloat(R6i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R124i.x = floatBitsToInt(sqrt(intBitsToFloat(PV1i.y)));
PS0i = R124i.x;
// 3
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg0i)),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.z)));
PS1i = R124i.w;
// 4
R123i.x = floatBitsToInt((intBitsToFloat(R5i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.x = R123i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PS1i)));
R127i.z = floatBitsToInt(mul_nonIEEE(uf_blockPS1[1].x, intBitsToFloat(R11i.x)));
R125i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS1[0].y,intBitsToFloat(R124i.x)) + intBitsToFloat(R0i.x)));
R127i.x = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R127i.x;
// 5
backupReg0i = R126i.x;
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS1[2].x, intBitsToFloat(R11i.x)));
R124i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R0i.z)),intBitsToFloat(backupReg0i)) + intBitsToFloat(backupReg0i)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(PV0i.x));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(R127i.w));
R0i.y = floatBitsToInt(-(intBitsToFloat(R11i.x)));
PS1i = R0i.y;
// 6
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R13i.x)) + intBitsToFloat(R127i.y)));
R127i.y = 0;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R13i.x)) + intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R13i.x)) + intBitsToFloat(R2i.z)));
R126i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS1[1].y,intBitsToFloat(R124i.x)) + intBitsToFloat(R127i.z)));
PS0i = R126i.y;
// 7
backupReg0i = R125i.y;
R0i.x = floatBitsToInt((mul_nonIEEE(uf_blockPS1[0].z,intBitsToFloat(R10i.z)) + intBitsToFloat(R125i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R124i.y)) + intBitsToFloat(backupReg0i)));
R125i.y = clampFI32(R125i.y);
R125i.z = 0x3f800000;
R125i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS1[2].y,intBitsToFloat(R124i.x)) + intBitsToFloat(R126i.x)));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(R127i.x));
PS1i = R127i.z;
// 8
backupReg0i = R0i.y;
backupReg0i = R0i.y;
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R124i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.y),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.y),0.0)));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R4i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS1[1].z,intBitsToFloat(R10i.z)) + intBitsToFloat(R126i.y)));
PS0i = R4i.y;
// 9
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R127i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R127i.z)));
R4i.z = floatBitsToInt((mul_nonIEEE(uf_blockPS1[2].z,intBitsToFloat(R10i.z)) + intBitsToFloat(R125i.w)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.z)));
R127i.w = 0x3f800000;
PS1i = R127i.w;
// 10
backupReg0i = R125i.x;
backupReg1i = R125i.y;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R126i.z)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(backupReg0i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), intBitsToFloat(R0i.x)));
R126i.w = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + 1.0);
R126i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R3i.z)), uf_blockPS1[17].y));
PS0i = R126i.y;
// 11
backupReg0i = R0i.x;
backupReg1i = R125i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R125i.w),intBitsToFloat(backupReg1i))));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.z = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(R4i.y)) + intBitsToFloat(PV0i.z)));
PS1i = R122i.x;
// 12
backupReg0i = R124i.y;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R125i.x)) + intBitsToFloat(R124i.w)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg0i)));
R10i.z = R0i.z;
R10i.z = floatBitsToInt(intBitsToFloat(R10i.z) / 2.0);
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),intBitsToFloat(R4i.z)) + intBitsToFloat(PS1i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg1i));
PS0i = floatBitsToInt(tempResultf);
// 13
backupReg0i = R125i.x;
backupReg1i = R125i.z;
backupReg2i = R126i.w;
R125i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R125i.y));
R125i.x = floatBitsToInt(intBitsToFloat(R125i.x) / 2.0);
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(PS0i)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(PS0i)));
R126i.w = floatBitsToInt((-(intBitsToFloat(backupReg1i)) * intBitsToFloat(0x41000000) + intBitsToFloat(0x41000000)));
R3i.z = floatBitsToInt(sqrt(intBitsToFloat(backupReg2i)));
PS1i = R3i.z;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R124i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R124i.y),intBitsToFloat(PS1i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R126i.y));
// 15
R124i.x = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(0x3fd55555) + intBitsToFloat(0x3fd55555)));
R126i.y = floatBitsToInt(mul_nonIEEE(uf_blockPS1[1].x, intBitsToFloat(R125i.z)));
PV1i.z = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(0x3fa00000));
PV1i.z = clampFI32(PV1i.z);
R126i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x41a00000));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R2i.z = floatBitsToInt(tempResultf);
PS1i = R2i.z;
// 16
backupReg0i = R126i.x;
backupReg1i = R125i.z;
backupReg1i = R125i.z;
R126i.x = floatBitsToInt(-(intBitsToFloat(R8i.z)) + intBitsToFloat(R7i.z));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
R125i.z = floatBitsToInt(mul_nonIEEE(uf_blockPS1[0].x, intBitsToFloat(backupReg1i)));
R124i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS1[2].x, intBitsToFloat(backupReg1i)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
// 17
backupReg0i = R126i.y;
PV1i.x = floatBitsToInt(-(intBitsToFloat(R6i.z)) + intBitsToFloat(R5i.z));
R126i.y = floatBitsToInt(min(intBitsToFloat(R124i.x), intBitsToFloat(R126i.w)));
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockPS1[1].y,intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg0i)));
PV1i.z = R123i.z;
R4i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R11i.z)), uf_blockPS1[15].x));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PS0i)));
PS1i = R127i.x;
// 18
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(R125i.x)) + 0.5));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R13i.x)) + intBitsToFloat(R8i.z)));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R13i.x)) + intBitsToFloat(R6i.z)));
R126i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS1[2].y,intBitsToFloat(R125i.y)) + intBitsToFloat(R124i.w)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R7i.y)));
PS0i = R124i.w;
// 19
backupReg0i = R124i.x;
R124i.x = floatBitsToInt((mul_nonIEEE(uf_blockPS1[0].y,intBitsToFloat(R125i.y)) + intBitsToFloat(R125i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R2i.z)));
R6i.z = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(R2i.w));
R1i.w = PV0i.x;
R1i.w = floatBitsToInt(intBitsToFloat(R1i.w) * 2.0);
PS1i = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R126i.y)));
// 20
R8i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(R124i.w));
R6i.y = floatBitsToInt(-(intBitsToFloat(R9i.x)) + intBitsToFloat(R1i.x));
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.y)));
R2i.w = floatBitsToInt(-(intBitsToFloat(R0i.z)) + 1.0);
R6i.x = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(R1i.y));
PS0i = R6i.x;
// 21
backupReg0i = R1i.z;
backupReg1i = R7i.y;
R1i.x = floatBitsToInt((mul_nonIEEE(uf_blockPS8[28].x,-(intBitsToFloat(R2i.x))) + uf_blockPS8[28].x));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R1i.w)) + -(intBitsToFloat(R8i.z))));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(R7i.y)));
R0i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(backupReg0i));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(backupReg1i)));
PS1i = R7i.y;
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R13i.x)) + intBitsToFloat(R9i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(R13i.x)) + intBitsToFloat(R9i.x)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), uf_blockPS1[16].x));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R2i.z)));
PV0i.w = R126i.w;
R124i.w = 0x3c808081;
PS0i = R124i.w;
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(R13i.x)) + intBitsToFloat(R9i.z)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R1i.z))/2.0);
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R2i.w)) + intBitsToFloat(R8i.z)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R8i.x))/2.0);
R127i.z = floatBitsToInt(uf_blockPS8[32].z);
PS1i = R127i.z;
// 2
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(R7i.y))/2.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R5i.z)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R1i.w)));
PV0i.w = floatBitsToInt(uf_blockPS8[28].y + intBitsToFloat(R1i.x));
PV0i.w = clampFI32(PV0i.w);
R3i.w = 0x3f800000;
PS0i = R3i.w;
// 3
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R10i.z)) + intBitsToFloat(PV0i.y)));
R2i.x = clampFI32(R2i.x);
R3i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV0i.w));
R3i.x = clampFI32(R3i.x);
PS1i = R3i.x;
// 4
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R125i.z)));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(R125i.z)));
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R125i.z)));
R4i.x = R124i.w;
PS0i = R4i.x;
// 5
R5i.x = floatBitsToInt(intBitsToFloat(R126i.y) + 0.5);
R3i.y = R127i.z;
R5i.z = floatBitsToInt(intBitsToFloat(R126i.x) + 0.5);
R5i.y = floatBitsToInt(intBitsToFloat(R127i.w) + 0.5);
PS1i = R5i.y;
// 6
R6i.x = R4i.w;
// 7
predResult = (1.0 > intBitsToFloat(R2i.x));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
R1i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R10i.xy)).xyzw);
R0i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R10i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R5i.x) + -(intBitsToFloat(R0i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(R1i.w) * intBitsToFloat(0x437f0000));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) * intBitsToFloat(0x437f0000));
R1i.w = R3i.x;
PV0i.w = R1i.w;
R126i.x = floatBitsToInt(intBitsToFloat(R5i.y) + -(intBitsToFloat(R0i.y)));
PS0i = R126i.x;
// 1
R125i.x = floatBitsToInt(intBitsToFloat(R7i.y) + -(intBitsToFloat(R1i.y)));
R126i.y = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R1i.x)));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(R0i.w)));
R127i.w = floatBitsToInt(intBitsToFloat(R5i.z) + -(intBitsToFloat(R0i.z)));
PS1i = int(intBitsToFloat(PV0i.z));
// 2
PV0i.x = PS1i & 0x00000002;
R126i.z = floatBitsToInt(intBitsToFloat(R7i.z) + -(intBitsToFloat(R1i.z)));
PS0i = int(intBitsToFloat(R127i.y));
// 3
PV1i.w = PS0i & 0x000000fc;
PS1i = floatBitsToInt(float(PV0i.x));
// 4
R125i.z = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(PS1i));
R125i.z = clampFI32(R125i.z);
PV0i.z = R125i.z;
PS0i = floatBitsToInt(float(PV1i.w));
// 5
backupReg0i = R0i.w;
backupReg1i = R0i.y;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R0i.x)));
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3b820821));
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV0i.z)) + intBitsToFloat(R0i.z)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg0i)));
PV1i.w = R0i.w;
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg1i)));
PS1i = R5i.y;
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R125i.z)) + intBitsToFloat(PV1i.y)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(0x427f0000) * intBitsToFloat(PV1i.w));
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R125i.z)) + intBitsToFloat(R1i.x)));
PS0i = R7i.x;
// 7
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 4.0);
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R125i.z)) + intBitsToFloat(R1i.y)));
R7i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R125i.z)) + intBitsToFloat(R1i.z)));
PV1i.w = floatBitsToInt(intBitsToFloat(0x427f0000) * intBitsToFloat(PV0i.x));
// 8
PV0i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 4.0);
R5i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081)));
// 9
R7i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3b808081));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
PV0i.y = floatBitsToInt(intBitsToFloat(0x427f0000) * intBitsToFloat(R3i.x));
R7i.w = 0;
// 1
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.y)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 4.0);
// 2
R5i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R2i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
R2i.w = R5i.w;
// 1
R1i.xyz = ivec3(R7i.x,R7i.y,R7i.z);
R1i.w = R7i.w;
// 2
R0i.xyz = ivec3(R4i.x,R3i.y,R3i.z);
R0i.w = R3i.w;
// 3
R3i.xyz = ivec3(R6i.x,R6i.y,R6i.y);
R3i.w = R6i.y;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));

vec4 tempf = passPixelColor1;
// recolor fully calculated output //

	float fuzzyRed = 12.0f;
	float fuzzyGreen = 28.0f;
	float fuzzyBlue = 28.0f;
	
	float fuzzySelect = 20.0f;

	float rredHigh = (fuzzyRed + fuzzySelect);
	rredHigh = (rredHigh > 1.0)?(1.0):(rredHigh);
	rredHigh = rredHigh;
	// .1882
	float ggreenHigh = (fuzzyGreen + fuzzySelect) / 255.0f;
	ggreenHigh = (ggreenHigh > 1.0)?(1.0):(ggreenHigh);
	ggreenHigh = ggreenHigh;
	
	float bblueHigh = (fuzzyBlue + fuzzySelect) / 255.0f;
	bblueHigh = (bblueHigh > 1.0)?(1.0):(bblueHigh);
	bblueHigh = bblueHigh;

	float rredLow = (fuzzyRed - fuzzySelect) / 255.0f;
	rredLow = (rredLow < 0.0)?(0):(rredLow);

	// 0.031
	float ggreenLow = (fuzzyGreen - fuzzySelect) / 255.0f;
	ggreenLow = (ggreenLow < 0.0)?(0):(ggreenLow);
	
	float bblueLow= (fuzzyBlue - fuzzySelect) / 255.0f;
	bblueLow = (bblueLow < 0.0)?(0):(bblueLow);



// Logic for range based on RBG distance... piss poor idea


// check if between certain values
// if (intBitsToFloat(R1i.x) < 0.1 ) && (intBitsToFloat(R1i.x) > 0.040) // red test
// if (intBitsToFloat(R1i.y) < 0.140 && intBitsToFloat(R1i.y) > 0.090) // green test 0.14
// if (intBitsToFloat(R1i.z) < 0.2 && intBitsToFloat(R1i.z) > 0.03) // blue test 0.03
if ((intBitsToFloat(R1i.x) > rredLow && intBitsToFloat(R1i.x) < rredHigh) && (intBitsToFloat(R1i.y) > ggreenLow && intBitsToFloat(R1i.y) < ggreenHigh) && (intBitsToFloat(R1i.z) > bblueLow && intBitsToFloat(R1i.z) < bblueHigh))

 // if ((intBitsToFloat(R1i.x) < 0.1 ) && (intBitsToFloat(R1i.x) > 0.040) && (intBitsToFloat(R1i.y) < 0.140 && intBitsToFloat(R1i.y) > 0.090) && (intBitsToFloat(R1i.z) < 0.2 && intBitsToFloat(R1i.z) > 0.03))

{
	/* check if we want to change a color. Rules.txt uses a specific (256,256,256) to indicate to only change brightness rather than colorize*/
	if ($Red != 256 || $Green != 256 || $Blue != 256)
	{
		/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
		float rred = $Red / 255.0f;
		float ggreen = $Green / 255.0f;
		float bblue = $Blue / 255.0f;

		/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
		float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

		/* Adjust brightness of greyscale */
		luma = luma*$Bright;

		/* Colorize and Export */
		passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, passPixelColor1.w*$Bright);
		
		// green channel feathering 
		// temp.y between 0.032 - .1882
		float factor = abs(fuzzyGreen/255.0f - tempf.y);
		float mixFactor = smoothstep(0.001, 0.13, factor);

		/* full color feathering logic */
		/* a number of how far the underlying color is from the desired color should provide a number between 0 and 0.47*/
		// float factor = abs(fuzzyRed/255.0f - tempf.x) + abs(fuzzyGreen/255.0f - tempf.y) + abs(fuzzyBlue/255.0f - tempf.z);
		/* Feather between two values based on the factor */
		// float mixFactor = smoothstep(0.00, 0.4, factor);
	
		mixFactor = 1-mixFactor;
		// /* use the mixFactor above to mix the colorized output calculated above with the original color for this pixel */
		passPixelColor1.rgb = mix(tempf.rgb, passPixelColor1.rgb, mixFactor);

	}
	else
	{
	/* only changing brightness */
		passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w))*$Bright;
		
		/* someitmes only changing the alpha channel looks superior */
		/* passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w*$Bright); */
	}
}

// passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor3 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
passPixelColor7 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
}
