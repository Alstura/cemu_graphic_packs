#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 5108f68f7424be0f
// water the still surface on top of running water
uniform ivec4 uf_remappedPS[14];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2DArray textureUnitPS2;// Tex2 addr 0xf5593000 res 640x360x2 dim 5 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xf4ccf000 res 1280x720x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0xb9e47000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0xb9e47000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0xb9e06000 res 512x512x1 dim 1 tm: 4 format 0035 compSel: 0 1 1 1 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 10) uniform sampler2D textureUnitPS10;// Tex10 addr 0xb9e47000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler10 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem7;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem7);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R5i = floatBitsToInt(passParameterSem6);
R1i.xy = floatBitsToInt(texture(textureUnitPS7, intBitsToFloat(R0i.xy)).xy);
R5i.xy = floatBitsToInt(texture(textureUnitPS10, intBitsToFloat(R0i.zw)).xy);
R0i.xy = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R0i.zw)).xy);
// 0
backupReg0i = R1i.x;
R1i.x = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R1i.y = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(uf_remappedPS[0].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R5i.z)), intBitsToFloat(uf_remappedPS[1].y)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R2i.w));
// 1
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS0i)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS0i)));
R2i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(uf_remappedPS[2].x)));
R0i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R0i.z;
R2i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R6i.xy)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R6i.xy)).y);
// 0
backupReg0i = R0i.z;
backupReg0i = R0i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(uf_remappedPS[0].x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R5i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R1i.x)));
R7i.z = floatBitsToInt(roundEven(1.0));
PS0i = R7i.z;
// 1
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(R2i.z)) + intBitsToFloat(R1i.z)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R6i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R6i.y)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(R5i.z)) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) / 2.0);
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(PV0i.y)) + intBitsToFloat(R1i.w)));
PS1i = R5i.y;
// 2
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(max(-(intBitsToFloat(PV1i.w)), 0.0));
R127i.y = floatBitsToInt(-(intBitsToFloat(R6i.y)) + intBitsToFloat(PV1i.z));
R127i.z = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV1i.y));
R123i.w = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PS0i = R126i.y;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.w)));
R0i.y = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV0i.w));
R0i.z = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(min(intBitsToFloat(PV0i.x), 1.0));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R4i.z)));
PS1i = R125i.y;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.x)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R6i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R6i.x)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R4i.x)));
R127i.x = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(0x437f0000));
PS0i = R127i.x;
// 5
R0i.x = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV0i.z));
R1i.y = floatBitsToInt(-(intBitsToFloat(R6i.y)) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x), intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(PV0i.y)));
PS1i = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
// 6
R1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[7].z) * intBitsToFloat(0x437f0000));
PV0i.y = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R4i.y)));
R6i.z = floatBitsToInt(sqrt(intBitsToFloat(PS1i)));
PS0i = R6i.z;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.5);
R8i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.z)),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.w)));
R8i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.y)),intBitsToFloat(R3i.z)) + intBitsToFloat(R125i.y)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + 0.5);
R8i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.x)),intBitsToFloat(R3i.y)) + intBitsToFloat(PV0i.w)));
PS1i = R8i.x;
// 8
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z), intBitsToFloat(PV1i.x)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].w), intBitsToFloat(PV1i.w)));
R2i.z = 0x3db0b0b1;
R11i.w = 0x3f800000;
R1i.w = int(uint(intBitsToFloat(R127i.x)));
PS0i = R1i.w;
R1i.z = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.xy)).x);
R9i.xyz = floatBitsToInt(texture(textureUnitPS9, intBitsToFloat(R5i.xy)).xyz);
// 0
PV0i.x = ((intBitsToFloat(R0i.w) > intBitsToFloat(R1i.z))?int(0xFFFFFFFF):int(0x0));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R6i.z)));
R11i.z = R2i.z;
R2i.w = 0x3f800000;
PS0i = int(uint(intBitsToFloat(R1i.x)));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R0i.z)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
PV1i.y = R1i.w | PS0i;
R123i.w = ((PV0i.x == 0)?(0x3f800000):(0));
PV1i.w = R123i.w;
R10i.w = 0x3b808081;
PS1i = R10i.w;
// 2
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R6i.x)));
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R6i.y)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R0i.y)) + intBitsToFloat(PV1i.x)));
R0i.w = floatBitsToInt(float(uint(PV1i.y)));
PS0i = R0i.w;
R1i.y = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R7i.xy)).x);
R7i.xyz = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z))).xyz);
// 0
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[0].x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) * intBitsToFloat(0x3b808081));
tempResultf = 1.0 / sqrt(intBitsToFloat(R1i.w));
PS0i = floatBitsToInt(tempResultf);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(PS0i)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(PS0i)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R5i.z)) + -(intBitsToFloat(PV0i.y)));
R11i.y = PV0i.z;
PS1i = R11i.y;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[8].y) + -(intBitsToFloat(PV1i.w)));
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[8].z) + -(intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[8].x) + -(intBitsToFloat(PV1i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(PV1i.x)));
PV0i.w = R127i.w;
R124i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[8].w) + -(intBitsToFloat(PV1i.w)));
PS0i = R124i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].y), intBitsToFloat(PV0i.x)));
PV1i.x = clampFI32(PV1i.x);
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].z), intBitsToFloat(PV0i.y)));
PV1i.y = clampFI32(PV1i.y);
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].x), intBitsToFloat(PV0i.z)));
PV1i.z = clampFI32(PV1i.z);
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV0i.w)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV0i.w)));
PS1i = R127i.x;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.x),-(intBitsToFloat(PV1i.x))) + intBitsToFloat(R9i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.y),-(intBitsToFloat(PV1i.x))) + intBitsToFloat(R9i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].x),-(intBitsToFloat(PV1i.y))) + intBitsToFloat(uf_remappedPS[10].x)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.z),-(intBitsToFloat(PV1i.x))) + intBitsToFloat(R9i.z)));
PV0i.w = R123i.w;
tempResultf = log2(intBitsToFloat(PV1i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
backupReg0i = R127i.w;
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.x));
R126i.x = clampFI32(R126i.x);
PV1i.x = R126i.x;
R125i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
R125i.y = clampFI32(R125i.y);
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].w), intBitsToFloat(PS0i)));
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.w));
R127i.w = clampFI32(R127i.w);
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(backupReg0i)));
// 6
backupReg0i = R127i.z;
backupReg0i = R127i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(R127i.z)) + intBitsToFloat(R126i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[10].y)),intBitsToFloat(PV1i.x)) + intBitsToFloat(uf_remappedPS[10].y)));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.x)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PS1i)));
R125i.x = floatBitsToInt(exp2(intBitsToFloat(PV1i.z)));
R125i.x = clampFI32(R125i.x);
PS0i = R125i.x;
// 7
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x427f0000));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].x), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].z), intBitsToFloat(PS0i)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[11].y), intBitsToFloat(PS0i)));
PV1i.w = R126i.w;
R4i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R126i.y)) + intBitsToFloat(PV0i.x))/2.0);
PS1i = R4i.w;
// 8
backupReg0i = R127i.w;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), intBitsToFloat(R126i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), intBitsToFloat(R125i.y)));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].x) + -(intBitsToFloat(PV1i.y)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].y) + -(intBitsToFloat(PV1i.w)));
// 9
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(R127i.z))/2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].z) + -(intBitsToFloat(R126i.z)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(R125i.w))/2.0);
PS1i = R125i.z;
// 10
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].w), intBitsToFloat(R124i.w)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(floor(intBitsToFloat(R127i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 4.0);
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),-(intBitsToFloat(R125i.x))) + intBitsToFloat(R7i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R127i.w)) + intBitsToFloat(R126i.z)));
PV0i.w = R123i.w;
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),-(intBitsToFloat(R125i.x))) + intBitsToFloat(R7i.x)));
PS0i = R2i.x;
// 11
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R126i.w)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.z)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
R7i.w = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),-(intBitsToFloat(R125i.x))) + intBitsToFloat(R7i.y)));
PS1i = R2i.y;
// 12
R7i.xyz = floatBitsToInt(vec3(intBitsToFloat(R4i.w),intBitsToFloat(R126i.x),intBitsToFloat(R125i.z)) + vec3(0.5,0.5,0.5));
// 13
R3i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R3i.w = R2i.w;
// 14
R2i.xyz = ivec3(R7i.x,R7i.y,R7i.z);
R2i.w = R7i.w;
// 15
R1i.xyz = ivec3(R10i.x,R10i.y,R10i.z);
R1i.w = R10i.w;
// 16
R0i.xyz = ivec3(R11i.z,R11i.y,R11i.z);
R0i.w = R11i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
/* color of water incidence angle based */
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor3 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
/* volumetric color of water */
passPixelColor5 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));


/* check if we want to change a color. Rules.txt uses a specific (256,256,256) to indicate to only change brightness rather than colorize*/
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred*1.1, luma*ggreen*1.1, luma*bblue*1.1, intBitsToFloat(R1i.w)*$Bright);
	
		/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	luma = dot(passPixelColor5.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor5 = vec4(luma*rred, luma*ggreen, luma*bblue, intBitsToFloat(R3i.w)*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor5 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w))*$Bright;
	passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w))*$Bright;
}

}
