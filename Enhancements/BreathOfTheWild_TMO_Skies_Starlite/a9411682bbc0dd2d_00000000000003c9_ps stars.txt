#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader a9411682bbc0dd2d
uniform ivec4 uf_remappedPS[11];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x38da3800 res 4x4x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x38da3800 res 4x4x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 1 1 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem2;
R2f = passParameterSem4;
// 0
backupReg0f = R0f.x;
backupReg0f = R0f.x;
PV0f.x = R0f.y + -(R2f.w);
R125f.y = R0f.y + -(R2f.y);
PV0f.z = backupReg0f + -(R2f.z);
R125f.w = backupReg0f + -(R2f.x);
PV0f.w = R125f.w;
PS0f = 1.0 / intBitsToFloat(uf_remappedPS[0].w);
// 1
PV1f.x = intBitsToFloat(uf_remappedPS[1].y) + intBitsToFloat(uf_remappedPS[1].z);
R127f.y = PV0f.z * PS0f;
PV1f.y = R127f.y;
R127f.z = PV0f.x * PS0f;
PV1f.w = mul_nonIEEE(PV0f.w, PV0f.w);
// 2
PV0f.x = mul_nonIEEE(PV1f.y, PV1f.y);
R7f.y = intBitsToFloat(uf_remappedPS[2].y) * 1.0;
R126f.w = (mul_nonIEEE(R125f.y,R125f.y) + PV1f.w);
R2f.w = 1.0 / PV1f.x;
PS0f = R2f.w;
// 3
R127f.w = (mul_nonIEEE(R127f.z,R127f.z) + PV0f.x);
PV1f.w = R127f.w;
R126f.z = 1.0 / intBitsToFloat(uf_remappedPS[3].w);
PS1f = R126f.z;
// 4
tempResultf = log2(PV1f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x), PS0f);
R126f.y = sqrt(R127f.w);
PS1f = R126f.y;
// 6
R127f.x = PS1f + -(intBitsToFloat(uf_remappedPS[4].z));
PV0f.y = PS1f + -(intBitsToFloat(uf_remappedPS[3].z));
PS0f = exp2(PV1f.x);
// 7
PV1f.x = PV0f.y * R126f.z;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.y = mul_nonIEEE(R127f.y, PS0f);
PV1f.z = mul_nonIEEE(R127f.z, PS0f);
R6f.w = R126f.y + -(intBitsToFloat(uf_remappedPS[5].y));
PS1f = 1.0 / intBitsToFloat(uf_remappedPS[4].w);
// 8
R6f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].y),PV1f.y) + R0f.x);
PV0f.x = R6f.x;
R126f.y = R127f.x * PS1f;
R126f.y = clamp(R126f.y, 0.0, 1.0);
R2f.z = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[5].x));
R5f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].y),PV1f.z) + R0f.y);
PV0f.w = R5f.w;
R5f.x = sqrt(R126f.w);
PS0f = R5f.x;
// 9
backupReg0f = R125f.y;
R126f.x = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[6].w));
R125f.y = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[6].w));
R1f.z = (mul_nonIEEE(backupReg0f,-(intBitsToFloat(uf_remappedPS[1].w))) + PV0f.w);
PV1f.z = R1f.z;
R3f.w = (mul_nonIEEE(R125f.w,-(intBitsToFloat(uf_remappedPS[1].w))) + PV0f.x);
PV1f.w = R3f.w;
// 10
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV1f.w);
R127f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV1f.z);
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].w), PV1f.z);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].w), PV1f.w);
R125f.w = mul_nonIEEE(R6f.x, intBitsToFloat(uf_remappedPS[1].x));
PS0f = R125f.w;
// 11
R2f.x = intBitsToFloat(uf_remappedPS[7].w) + PV0f.w;
R5f.y = R2f.z + intBitsToFloat(uf_remappedPS[7].z);
R126f.z = mul_nonIEEE(R5f.w, intBitsToFloat(uf_remappedPS[1].x));
R0f.w = R125f.y + intBitsToFloat(uf_remappedPS[7].w);
// 12
R0f.x = intBitsToFloat(uf_remappedPS[6].y) + R127f.x;
R2f.y = intBitsToFloat(uf_remappedPS[6].x) + R127f.z;
R0f.z = intBitsToFloat(uf_remappedPS[6].z) + R127f.y;
R1f.w = intBitsToFloat(uf_remappedPS[6].y) + R125f.w;
R0f.y = intBitsToFloat(uf_remappedPS[6].x) + R126f.x;
PS0f = R0f.y;
// 13
R1f.y = intBitsToFloat(uf_remappedPS[6].z) + R126f.z;
R4f.w = (mul_nonIEEE(R126f.y,intBitsToFloat(uf_remappedPS[8].x)) + 1.0);
R3f.xy = (texture(textureUnitPS1, R0f.zx).xw);
R2f.xy = (texture(textureUnitPS1, R2f.xy).xw);
R0f.xy = (texture(textureUnitPS1, R0f.wy).xw);
R4f.xy = (texture(textureUnitPS1, R1f.yw).xw);
// 0
backupReg0f = R0f.x;
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), R2f.x);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R3f.y);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R3f.x);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), R2f.y);
R125f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), backupReg0f);
PS0f = R125f.w;
// 1
backupReg0f = R0f.y;
PV1f.x = PV0f.x + PV0f.z;
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R4f.x);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), backupReg0f);
PV1f.w = PV0f.w + PV0f.y;
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R4f.y);
// 2
PV0f.x = R2f.w * PV1f.x;
PV0f.y = R125f.w + PV1f.y;
PV0f.z = PV1f.z + PS1f;
PV0f.w = R2f.w * PV1f.w;
R122f.x = (-(intBitsToFloat(uf_remappedPS[9].x)) * 4.0 + R2f.z);
PS0f = R122f.x;
// 3
PV1f.x = PV0f.x + -(0.5);
PV1f.y = PV0f.y * R2f.w;
PV1f.z = PV0f.z * R2f.w;
PV1f.w = PV0f.w + -(0.5);
R2f.w = intBitsToFloat(uf_remappedPS[7].z) + PS0f;
PS1f = R2f.w;
// 4
PV0f.x = PV1f.y + -(0.5);
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), PV1f.w);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), PV1f.x);
PV0f.w = PV1f.z + -(0.5);
PS0f = intBitsToFloat(uf_remappedPS[0].x) + -(R5f.x);
// 5
R3f.x = (mul_nonIEEE(R4f.w,PV0f.z) + R3f.w);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), PV0f.x);
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), PV0f.w);
R3f.w = (mul_nonIEEE(R4f.w,PV0f.y) + R1f.z);
PS1f = max(PS0f, 0.0);
// 6
backupReg0f = R6f.x;
R6f.x = (mul_nonIEEE(R4f.w,PV1f.y) + backupReg0f);
R6f.y = (mul_nonIEEE(R4f.w,PV1f.z) + R5f.w);
R4f.w = min(PS1f, 0.5);
R2f.z = 1.0 / intBitsToFloat(uf_remappedPS[5].z);
PS0f = R2f.z;
R1f.z = (texture(textureUnitPS0, R3f.xw).x);
R3f.w = (texture(textureUnitPS0, R6f.xy).x);
// 0
PV0f.x = R1f.z + R2f.w;
PV0f.y = mul_nonIEEE(R4f.w, R4f.w);
PV0f.w = R3f.w + R5f.y;
// 1
PV1f.x = mul_nonIEEE(R1f.x, PV0f.w);
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
R126f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].w), PV0f.y);
PV1f.z = mul_nonIEEE(R1f.x, PV0f.x);
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
R125f.w = R6f.w * R2f.z;
R125f.w = clamp(R125f.w, 0.0, 1.0);
// 2
PV0f.x = PV1f.x + -(intBitsToFloat(uf_remappedPS[10].z));
PV0f.y = -(intBitsToFloat(uf_remappedPS[10].z)) + PV1f.z;
// 3
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[10].y), PV0f.x);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV1f.w = max(PV0f.y, 0.0);
// 4
PV0f.x = min(PV1f.w, intBitsToFloat(0x3f733333));
// 5
R126f.z = (PV0f.x * intBitsToFloat(0x3e4ccccd) + R127f.x);
PV1f.z = R126f.z;
// 6
PV0f.y = mul_nonIEEE(PV1f.z, R126f.y);
// 7
R123f.w = (PV0f.y * intBitsToFloat(0x40c00000) + R126f.z);
PV1f.w = R123f.w;
// 8
R7f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].w),R125f.w) + PV1f.w);
R7f.w = clamp(R7f.w, 0.0, 1.0);
// export
passPixelColor0 = vec4(R7f.y, R7f.y, R7f.y, R7f.w);


/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R7f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor0 = vec4(R7f.x, R7f.y, R7f.z, R7f.w)*$Bright;
}

}
