#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 5a39ec86ce6c110e
uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xb46a1000 res 512x512x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xb46cb000 res 256x256x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0xb46c2000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem5;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem5;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem6;
R5f.xyz = (texture(textureUnitPS4, R0f.xy).xyz);
R0f.w = (texture(textureUnitPS5, R0f.xy).x);
R6f.xyzw = (texture(textureUnitPS3, R0f.xy).xyzw);
// 0
PV0f.x = mul_nonIEEE(R2f.y, R3f.z);
PV0f.y = mul_nonIEEE(R2f.z, R3f.x);
R126f.z = (R5f.x * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PV0f.z = R126f.z;
PV0f.w = mul_nonIEEE(R2f.x, R3f.y);
R127f.y = (R5f.y * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204));
PS0f = R127f.y;
// 1
PV1f.x = mul_nonIEEE(PV0f.z, PV0f.z);
R126f.y = (mul_nonIEEE(-(R3f.y),R2f.z) + PV0f.x);
R127f.z = (mul_nonIEEE(-(R3f.z),R2f.x) + PV0f.y);
R127f.w = (mul_nonIEEE(-(R3f.x),R2f.y) + PV0f.w);
R122f.x = (mul_nonIEEE(-(R4f.z),intBitsToFloat(uf_remappedPS[0].x)) + -(intBitsToFloat(uf_remappedPS[0].y)));
R122f.x = clamp(R122f.x, 0.0, 1.0);
PS1f = R122f.x;
// 2
backupReg0f = R127f.y;
backupReg0f = R127f.y;
PV0f.x = mul_nonIEEE(R3f.w, R127f.y);
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z),PS1f) + 1.0);
PV0f.y = R127f.y;
R125f.z = R5f.z * intBitsToFloat(0x427f0000);
R123f.w = (mul_nonIEEE(backupReg0f,backupReg0f) + PV1f.x);
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV0f.w = R123f.w;
R124f.z = intBitsToFloat(0x3c808081);
PS0f = R124f.z;
// 3
PV1f.x = mul_nonIEEE(R127f.z, PV0f.x);
PV1f.y = mul_nonIEEE(R127f.w, PV0f.x);
R127f.z = -(PV0f.w) + 1.0;
PV1f.w = mul_nonIEEE(R126f.y, PV0f.x);
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x), PV0f.y);
PS1f = R127f.x;
// 4
backupReg0f = R126f.z;
backupReg0f = R126f.z;
R126f.x = (mul_nonIEEE(R3f.x,R126f.z) + PV1f.w)/2.0;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), R127f.y);
R126f.z = (mul_nonIEEE(R3f.z,backupReg0f) + PV1f.y)/2.0;
R127f.w = (mul_nonIEEE(R3f.y,backupReg0f) + PV1f.x)/2.0;
PS0f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), R127f.y);
// 5
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = mul_nonIEEE(R0f.w, PV0f.y);
PV1f.y = mul_nonIEEE(R0f.w, backupReg0f);
R127f.z = intBitsToFloat(uf_remappedPS[2].z);
R126f.w = mul_nonIEEE(R0f.w, PS0f);
PS1f = sqrt(backupReg1f);
PS1f /= 2.0;
// 6
backupReg0f = R126f.x;
backupReg1f = R126f.z;
R126f.x = (mul_nonIEEE(R2f.y,PS1f) + R127f.w);
R127f.y = (mul_nonIEEE(R2f.x,PS1f) + backupReg0f);
R126f.z = floor(R125f.z);
R126f.z *= 4.0;
R127f.w = (mul_nonIEEE(R2f.z,PS1f) + backupReg1f);
R2f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), PV1f.y);
PS0f = R2f.x;
// 7
R0f.x = mul_nonIEEE(R1f.x, R6f.x);
R2f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), R127f.x);
R2f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), R126f.w);
R3f.w = R6f.w;
R0f.y = mul_nonIEEE(R1f.x, R6f.y);
PS1f = R0f.y;
// 8
R3f.x = R124f.z;
R3f.y = R127f.z;
R0f.z = mul_nonIEEE(R1f.x, R6f.z);
R2f.w = 1.0;
R1f.x = R127f.y + 0.5;
PS0f = R1f.x;
// 9
R1f.y = R126f.x + 0.5;
R1f.z = R127f.w + 0.5;
R0f.w = intBitsToFloat(0x3b808081);
R1f.w = (R126f.z * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081));
PS1f = R1f.w;
// 10
R7f.xyz = vec3(R2f.x,R2f.y,R2f.z);
R7f.w = R2f.w;
// 11
R6f.xyz = vec3(R1f.x,R1f.y,R1f.z);
R6f.w = R1f.w;
// 12
R5f.xyz = vec3(R0f.x,R0f.y,R0f.z);
R5f.w = R0f.w;
// 13
R4f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R4f.w = R3f.w;
// export
if( ((vec4(R4f.x, R4f.y, R4f.z, R4f.w)).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
passPixelColor1 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
passPixelColor3 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
/* color */
passPixelColor5 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);


/* check if we want to change a color. Rules.txt uses a specific (256,256,256) to indicate to only change brightness rather than colorize*/
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor5.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor5 = vec4(luma*rred, luma*ggreen, luma*bblue, R7f.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor5 = vec4(R7f.x, R7f.y, R7f.z, R7f.w)*$Bright;
}
}
