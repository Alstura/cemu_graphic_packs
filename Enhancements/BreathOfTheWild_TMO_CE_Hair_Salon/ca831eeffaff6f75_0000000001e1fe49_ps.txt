#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ca831eeffaff6f75
uniform ivec4 uf_remappedPS[3];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x327dd000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x327ed000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
// seems possibly responsible for celshading
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x327e1000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem3);
R2i = floatBitsToInt(passParameterSem4);
R3i = floatBitsToInt(passParameterSem6);
R4i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.xy)).xy);
R0i.w = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.xy)).x);
R6i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.xy)).xyz);
// 0
R126i.x = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R2i.y)));
R127i.z = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R2i.x)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R2i.z)));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.z)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.z)),intBitsToFloat(R1i.x)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.x)),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R122i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.y)),intBitsToFloat(R1i.z)) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 2
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.w)));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.x)));
R4i.y = floatBitsToInt(intBitsToFloat(0x43480000) * intBitsToFloat(uf_remappedPS[0].w));
PS0i = R4i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PS1i = R125i.x;
// 4
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R126i.x)) + intBitsToFloat(R127i.w)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(R126i.x)) + intBitsToFloat(R127i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) * intBitsToFloat(0x427f0000));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R126i.x)) + intBitsToFloat(backupReg0i)));
R127i.y = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R127i.y;
// 5
PV1i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 4.0);
R126i.z = 0x3d40c0c1;
R125i.w = uf_remappedPS[1].z;
PS1i = floatBitsToInt(sqrt(intBitsToFloat(R125i.x)));
// 6
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PS1i)) + intBitsToFloat(R127i.w)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PS1i)) + intBitsToFloat(R126i.y)));
PV0i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(PS1i)) + intBitsToFloat(backupReg0i)));
PV0i.z = R127i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + 2.0);
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(backupReg1i));
PS0i = R127i.w;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(PS0i)));
PS1i = R1i.y;
// 8
backupReg0i = R3i.x;
backupReg1i = R3i.z;
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.w)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R127i.w)));
R5i.w = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(0x3b808081));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R126i.z;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
PV1i.z = R126i.z;
R0i.w = floatBitsToInt(1.0);
R0i.x = backupReg2i;
PS1i = R0i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
PS0i = PV1i.x;
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 11
PV1i.x = R127i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(PS0i)) + intBitsToFloat(R3i.x)));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
R127i.z = clampFI32(R127i.z);
PV1i.z = R127i.z;
PV1i.w = R126i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 2.0);
R5i.x = floatBitsToInt((intBitsToFloat(R127i.x) * 0.5 + 0.5));
PS1i = R5i.x;
// 12
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.w)) + intBitsToFloat(R3i.z)));
PV0i.z = R123i.z;
R5i.y = floatBitsToInt((intBitsToFloat(R127i.y) * 0.5 + 0.5));
PS0i = R5i.y;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R126i.y),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.z = tempi.x;
R0i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.x)));
PS1i = R0i.z;
// 14
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(PV1i.x)) + 1.0));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
R5i.z = floatBitsToInt((intBitsToFloat(R126i.z) * 0.5 + 0.5));
R0i.y = R125i.w;
PS0i = R0i.y;
// 15
R1i.x = floatBitsToInt(sqrt(intBitsToFloat(PV0i.y)));
PS1i = R1i.x;
// 0
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R3i.x)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(R1i.y)));
PV0i.y = R126i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(uf_remappedPS[2].z)) + intBitsToFloat(R3i.z)));
PV0i.z = R126i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS0i)));
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = tempi.x;
// 5
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(PV0i.x)) + 1.0));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
// 6
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.z)));
// 7
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.z)),intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.y)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
// 9
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 10
PV0i.w = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x42700000));
// 11
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
// 12
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R0i.z)));
// 13
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x437f0000));
// 14
PS0i = int(intBitsToFloat(PV1i.y));
// 15
PV1i.w = PS0i & 0x000000e0;
// 16
PV0i.z = PV1i.w >> 0x00000003;
// 17
PS1i = floatBitsToInt(float(PV0i.z));
// 18
PV0i.x = floatBitsToInt(intBitsToFloat(PS1i) + intBitsToFloat(0x42800000));
// 19
R6i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3b808081));
// 20
R3i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
R3i.w = R5i.w;
// 21
R2i.xyz = ivec3(R6i.x,R6i.y,R6i.z);
R2i.w = R6i.w;
// 22
R1i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R1i.w = R0i.w;



// each output is a differnt part of links hair.. highlights.. darks .. etc
// passPixelColor0 = vec4(intBitsToFloat(R1i.x)*$Red, intBitsToFloat(R1i.y)*$Green, intBitsToFloat(R1i.z)*$Blue, intBitsToFloat(R1i.w));
passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));


// passPixelColor1 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));

/* Gather the inputs into one spot also the original output code*/
passPixelColor1 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));

// check if we want to change a color
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	// Adjust brightness of greyscale
	luma = luma*$Bright;
	 
	// Normalize RGB (255,255,255) => RGB (1,1,1) system
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Colorize and Export */
	passPixelColor1.rgb = vec3(luma*rred, luma*ggreen, luma*bblue);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(intBitsToFloat(R2i.x)*$Bright, intBitsToFloat(R2i.y)*$Bright, intBitsToFloat(R2i.z)*$Bright, intBitsToFloat(R2i.w));
}

// passPixelColor3 = vec4(intBitsToFloat(R3i.x)*$Red, intBitsToFloat(R3i.y)*$Green, intBitsToFloat(R3i.z)*$Blue, intBitsToFloat(R3i.w));
passPixelColor3 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));

}
