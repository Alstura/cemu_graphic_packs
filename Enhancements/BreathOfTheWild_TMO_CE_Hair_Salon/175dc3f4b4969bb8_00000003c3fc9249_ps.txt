#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 175dc3f4b4969bb8
// Face
uniform ivec4 uf_remappedPS[3];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x30473000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x30485000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x3047c000 res 256x256x1 dim 1 tm: 4 format 0035 compSel: 0 1 5 5 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x30477000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x30483000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0x3045c000 res 512x512x1 dim 1 tm: 4 format 0035 compSel: 0 1 1 1 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem3;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem7;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem3);
R2i = floatBitsToInt(passParameterSem4);
R3i = floatBitsToInt(passParameterSem7);
R4i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.zw)).xy);
R7i.xw = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.zw)).xw);
R1i.w = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.zw)).x);
R5i.xyz = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).xyz);
R6i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.xy)).xyz);
R0i.xyz = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.zw)).xyz);
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R2i.z)));
R127i.y = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.y = R127i.y;
PV0i.z = floatBitsToInt(fract(intBitsToFloat(R3i.y)));
PV0i.w = floatBitsToInt(fract(intBitsToFloat(R3i.x)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R2i.x)));
PS0i = R126i.x;
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + -(0.5));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R2i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
R125i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(0.5));
PS1i = R125i.x;
// 2
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV1i.x)));
PV0i.x = R127i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.y)),intBitsToFloat(R1i.z)) + intBitsToFloat(backupReg0i)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.z)),intBitsToFloat(R1i.x)) + intBitsToFloat(R126i.x)));
PV0i.w = R123i.w;
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(PV1i.y)) + 1.0));
R127i.w = clampFI32(R127i.w);
PS0i = R127i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.x)));
R126i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.x)),intBitsToFloat(R125i.x)) + 1.0));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.x)),intBitsToFloat(R1i.y)) + intBitsToFloat(R127i.z)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.x)));
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R127i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PV1i.z)));
R127i.z = floatBitsToInt(intBitsToFloat(R7i.w) * intBitsToFloat(0x437f0000));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(PV1i.x)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(R127i.y)) + intBitsToFloat(PS1i)));
PS0i = R126i.z;
// 5
backupReg0i = R127i.y;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
R127i.y = floatBitsToInt(intBitsToFloat(R5i.y) + -(1.0));
R125i.z = floatBitsToInt(intBitsToFloat(R5i.x) + -(1.0));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(sqrt(intBitsToFloat(R126i.y)));
// 6
backupReg0i = R1i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PS1i)) + intBitsToFloat(R127i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PS1i)) + intBitsToFloat(R126i.z)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(PV1i.x)));
PS0i = int(intBitsToFloat(R127i.z));
// 7
backupReg0i = R125i.z;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x427f0000));
R127i.y = floatBitsToInt(intBitsToFloat(R5i.z) + -(1.0));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[0].y)) + 1.0));
PV1i.w = PS0i & 0x000000f0;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[0].y)) + 1.0));
PS1i = R126i.z;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = tempi.x;
R127i.z = PV1i.w >> 0x00000003;
PS0i = R127i.z;
// 9
backupReg0i = R0i.y;
R125i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].y)) + intBitsToFloat(R6i.y));
PV1i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(R6i.x));
R124i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedPS[0].y)) + 1.0));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
PS1i = R126i.w;
// 10
backupReg0i = R126i.y;
R124i.x = floatBitsToInt(floor(intBitsToFloat(R127i.x)));
R124i.x = floatBitsToInt(intBitsToFloat(R124i.x) * 4.0);
R126i.y = floatBitsToInt(intBitsToFloat(R0i.z) + -(1.0));
PV0i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].z)) + intBitsToFloat(R6i.z));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R125i.z)) + intBitsToFloat(uf_remappedPS[1].x)));
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg0i));
R127i.x = floatBitsToInt(tempResultf);
PS0i = R127i.x;
// 11
backupReg0i = R126i.x;
backupReg1i = R127i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R127i.w)) + intBitsToFloat(uf_remappedPS[1].z)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R126i.z)) + intBitsToFloat(uf_remappedPS[1].y)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
R125i.y = floatBitsToInt(float(backupReg1i));
PS1i = R125i.y;
// 12
backupReg0i = R126i.y;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(uf_remappedPS[0].x)) + 1.0));
PV0i.x = R123i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R127i.x)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(uf_remappedPS[0].x)) + 1.0));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[0].x)) + 1.0));
R127i.w = 0x3d50d0d1;
PS0i = R127i.w;
// 13
backupReg0i = R124i.x;
backupReg1i = R125i.y;
backupReg2i = R125i.w;
R124i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + 2.0);
R125i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(0x42800000));
PV1i.z = uf_remappedPS[2].z;
R125i.w = floatBitsToInt((intBitsToFloat(R7i.x) * 0.25 + intBitsToFloat(0x3f400000))/2.0);
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PV0i.x)));
PS1i = R1i.x;
// 14
R0i.x = R127i.w;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R124i.z)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R126i.w)));
R0i.w = floatBitsToInt(1.0);
R0i.y = PV1i.z;
PS0i = R0i.y;
// 15
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R125i.w)) + 0.5));
PV1i.x = R7i.x;
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R125i.w)) + 0.5));
PV1i.y = R7i.y;
R7i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R125i.w)) + 0.5));
PV1i.z = R7i.z;
R7i.w = floatBitsToInt(intBitsToFloat(R124i.x) * intBitsToFloat(0x3b808081));
PV1i.w = R7i.w;
R1i.w = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(0x3b808081));
PS1i = R1i.w;
// 16
R4i.xyz = ivec3(PV1i.x,PV1i.y,PV1i.z);
R4i.w = PV1i.w;
// 17
R3i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R3i.w = R1i.w;
// 18
R2i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R2i.w = R0i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
passPixelColor1 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor3 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));

// recolor fully calculated output //

	float fuzzyRed = 12.0f;
	float fuzzyGreen = 28.0f;
	float fuzzyBlue = 28.0f;
	
	float fuzzySelect = 20.0f;

	float rredHigh = (fuzzyRed + fuzzySelect)/ 255.0f;
	float ggreenHigh = (fuzzyGreen + fuzzySelect) / 255.0f;
	float bblueHigh = (fuzzyBlue + fuzzySelect) / 255.0f;

	float rredLow = (fuzzyRed - fuzzySelect) / 255.0f;
	float ggreenLow = (fuzzyGreen - fuzzySelect) / 255.0f;
	float bblueLow= (fuzzyBlue - fuzzySelect) / 255.0f;


// Logic for range based on RBG distance... piss poor idea


// check if between certain values

// if ((intBitsToFloat(R3i.x) > rredLow && intBitsToFloat(R3i.x) < rredHigh) && (intBitsToFloat(R3i.y) > ggreenLow && intBitsToFloat(R3i.y) < ggreenHigh) && (intBitsToFloat(R3i.z) > bblueLow && intBitsToFloat(R3i.z) < bblueHigh))


// if (intBitsToFloat(R3i.x) < 0.16 )  // red test for link
if ((intBitsToFloat(R3i.y) < 0.11 ) || (intBitsToFloat(R3i.x) < 0.16 )) // red test
// if (intBitsToFloat(R3i.y) < 0.140 && intBitsToFloat(R3i.y) > 0.090) // green test 0.14
// if (intBitsToFloat(R3i.z) < 0.2 && intBitsToFloat(R3i.z) > 0.03) // blue test 0.03

 // if ((intBitsToFloat(R3i.x) < 0.1 ) && (intBitsToFloat(R3i.x) > 0.040) && (intBitsToFloat(R3i.y) < 0.140 && intBitsToFloat(R3i.y) > 0.090) && (intBitsToFloat(R3i.z) < 0.2 && intBitsToFloat(R3i.z) > 0.03))

{
	/* check if we want to change a color. Rules.txt uses a specific (256,256,256) to indicate to only change brightness rather than colorize*/
	if ($Red != 256 || $Green != 256 || $Blue != 256)
	{
		/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
		float rred = $Red / 255.0f;
		float ggreen = $Green / 255.0f;
		float bblue = $Blue / 255.0f;

// amount ot mix with base color ... abs(refRed - R2i.x) + abs(refGreen - R2i.y) + abs(refBlue - R2i.z)
		// float factor = abs(0.07 - intBitsToFloat(R2i.x)) + abs(0.11 - intBitsToFloat(R2i.y)) + abs(0.11 - intBitsToFloat(R2i.z));
		// float factor = abs(fuzzyRed/255.0f - intBitsToFloat(R2i.x)) + abs(fuzzyGreen/255.0f - intBitsToFloat(R2i.y)) + abs(fuzzyBlue/255.0f  - intBitsToFloat(R2i.z));

		/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
		float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

		/* Adjust brightness of greyscale */
		luma = luma*$Bright;

		/* Colorize and Export */
		passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, passPixelColor1.w*$Bright);
		
		// passPixelColor1 = mix(vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w)), vec4(luma*rred, luma*ggreen, luma*bblue, passPixelColor1.w*$Bright), factor);
	}
	else
	{
	/* only changing brightness */
		passPixelColor1 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w))*$Bright;
		
		/* someitmes only changing the alpha channel looks superior */
		/* passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w*$Bright); */
	}
}

}
