#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 52b2a2efea02248b
layout(binding = 0) uniform sampler2DArray textureUnitPS0;// Tex0 addr 0xf5177000 res 640x360x1 dim 5 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
// 0
R2f.x = R0f.x;
R2f.y = R0f.w;
R3f.w = R0f.x;
R3f.y = R0f.z;
PS0f = R3f.y;
// 1
R4f.x = R1f.x;
R4f.y = R1f.z;
R1f.z = roundEven(0.0);
PV1f.z = R1f.z;
// 2
R3f.x = PV1f.z;
R0f.z = PV1f.z;
R2f.w = PV1f.z;
R4f.z = PV1f.z;
PS0f = R4f.z;
R1f.w = (texture(textureUnitPS0, vec3(R1f.x,R1f.y,R1f.z)).x);
R0f.z = (texture(textureUnitPS0, vec3(R0f.x,R0f.y,R0f.z)).x);
R2f.y = (texture(textureUnitPS0, vec3(R2f.x,R2f.y,R2f.w)).x);
R3f.x = (texture(textureUnitPS0, vec3(R3f.w,R3f.y,R3f.x)).x);
R4f.y = (texture(textureUnitPS0, vec3(R4f.x,R4f.y,R4f.z)).x);
// 0
R123f.w = (R1f.w * intBitsToFloat(0x3d8fe9dc) + 0.0);
PV0f.w = R123f.w;
// 1
R123f.w = (R0f.z * intBitsToFloat(0x3ea1e718) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.z = (R2f.y * intBitsToFloat(0x3e6879c6) + PV1f.w);
PV0f.z = R123f.z;
// 3
R123f.w = (R3f.x * intBitsToFloat(0x3ea1e718) + PV0f.z);
PV1f.w = R123f.w;
// 4
R3f.x = (R4f.y * intBitsToFloat(0x3d8fe9dc) + PV1f.w);
// export
passPixelColor0 = vec4(R3f.x*$Size, R3f.x*$Size, R3f.x, R3f.x*$Intensity);
}
