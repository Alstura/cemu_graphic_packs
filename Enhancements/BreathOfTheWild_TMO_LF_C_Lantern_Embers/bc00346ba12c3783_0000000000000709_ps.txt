#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader bc00346ba12c3783
// Lantern embers
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2068a000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x2068e000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x2068a000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem7;
layout(location = 4) in vec4 passParameterSem8;
layout(location = 5) in vec4 passParameterSem9;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R3f = passParameterSem7;
R4f = passParameterSem8;
R5f = passParameterSem9;
R6f.xyzw = (texture(textureUnitPS1, R4f.zw).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R5f.x = (texture(textureUnitPS2, R5f.xy).w);
// 0
PV0f.x = -(R6f.w) + 1.0;
R127f.y = mul_nonIEEE(R4f.z, R4f.z);
R127f.z = mul_nonIEEE(R4f.y, R4f.y);
PV0f.w = mul_nonIEEE(R4f.x, R4f.x);
R122f.x = (mul_nonIEEE(-(R6f.x),R6f.x) + 1.0);
PS0f = R122f.x;
// 1
R123f.x = (mul_nonIEEE(-(R6f.z),R6f.z) + 1.0);
PV1f.x = R123f.x;
PV1f.y = R4f.w + -(PV0f.x);
R123f.z = (mul_nonIEEE(-(R6f.y),R6f.y) + 1.0);
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(PV0f.w, PS0f);
R127f.w = R0f.x + -(R1f.x);
PS1f = R127f.w;
// 2
backupReg0f = R0f.y;
PV0f.x = mul_nonIEEE(PV1f.y, R5f.x);
PV0f.y = PV1f.w * 1.0;
PV0f.z = mul_nonIEEE(R127f.y, PV1f.x);
PV0f.w = mul_nonIEEE(R127f.z, PV1f.z);
R127f.z = backupReg0f + -(R1f.y);
PS0f = R127f.z;
// 3
backupReg0f = R0f.z;
PV1f.x = PV0f.z * 1.0;
R123f.y = (mul_nonIEEE(R3f.w,PV0f.x) + -(R0f.w));
PV1f.y = R123f.y;
PV1f.z = PV0f.w * 1.0;
PV1f.w = backupReg0f + -(R1f.z);
R122f.x = (mul_nonIEEE(R127f.w,PV0f.y) + R1f.x);
PS1f = R122f.x;
// 4
PV0f.x = mul_nonIEEE(R1f.w, PV1f.y);
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
R123f.z = (mul_nonIEEE(PV1f.w,PV1f.x) + R1f.z);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.z,PV1f.z) + R1f.y);
PV0f.w = R123f.w;
R1f.x = mul_nonIEEE(R3f.x, PS1f);
PS0f = R1f.x;
// 5
R1f.y = mul_nonIEEE(R3f.y, PV0f.w);
R1f.z = mul_nonIEEE(R3f.z, PV0f.z);
R1f.w = mul_nonIEEE(R2f.x, PV0f.x);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
// passPixelColor0 = vec4(R1f.x*$Red, R1f.y*$Green, R1f.z*$Blue, R1f.w)*$Bright;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);

	// check if we want to change a color
	if ($Red != 256 || $Green != 256 || $Blue != 256)
	{
		/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
		float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));

		// Adjust brightness of greyscale
		luma = luma*$Bright;
		 
		// Normalize RGB (255,255,255) => RGB (1,1,1) system
		float rred = $Red / 255.0f;
		float ggreen = $Green / 255.0f;
		float bblue = $Blue / 255.0f;

		/* Colorize and Export */
		passPixelColor0 = vec4(luma*rred, luma*ggreen, luma*bblue, R1f.w*$Bright);
	}
	else
	{
	/* only changing brightness */
		passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w)*$Bright;
	}
}
