#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader fb59bf9f299f562b
// hateno lab window
uniform ivec4 uf_remappedPS[5];
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xb8134000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xb813f000 res 128x128x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0xb8137000 res 64x64x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0xb813e000 res 16x16x1 dim 1 tm: 2 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x5) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0xb813c000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem5;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 5) in vec4 passParameterSem254;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 5) out vec4 passPixelColor5;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem5);
R2i = floatBitsToInt(passParameterSem3);
R3i = floatBitsToInt(passParameterSem4);
R4i = floatBitsToInt(passParameterSem6);
R5i = floatBitsToInt(passParameterSem254);
R5i.w = floatBitsToInt(gl_FrontFacing?1.0:0.0);
R5i.xy = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.xy)).xx);
R9i.xyz = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.xy)).xyz);
R7i.xyz = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).xyz);
R10i.xyz = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.xy)).xyz);
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R3i.z)));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R3i.x)));
R1i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(R2i.z)) + intBitsToFloat(PS0i)));
R1i.z = floatBitsToInt((intBitsToFloat(R9i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV1i.z = R1i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R3i.y)));
PS1i = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
// 2
R126i.x = floatBitsToInt((intBitsToFloat(R9i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R6i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.z)),intBitsToFloat(R2i.x)) + intBitsToFloat(PV1i.x)));
R5i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.x)),intBitsToFloat(R2i.y)) + intBitsToFloat(PV1i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PS1i));
// 3
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PS0i)));
PV1i.z = R127i.z;
R126i.w = floatBitsToInt((intBitsToFloat(R5i.w) > 0.0)?1.0:0.0);
R125i.x = floatBitsToInt((0.0 > intBitsToFloat(R5i.w))?1.0:0.0);
PS1i = R125i.x;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R126i.x)) + intBitsToFloat(R127i.w)));
R126i.z = clampFI32(R126i.z);
PS0i = R126i.z;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.y),intBitsToFloat(R6i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R5i.x)));
// 6
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(PS1i)) + intBitsToFloat(R0i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(R126i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(R125i.x)));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R5i.y)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R126i.z)) + 1.0);
PS0i = R4i.y;
// 7
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PV0i.y)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R0i.w)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV0i.y)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(PV0i.y)));
R5i.w = ((intBitsToFloat(PV0i.z) != 0.0)?int(0xFFFFFFFF):int(0x0));
PS1i = R5i.w;
R8i.xyz = floatBitsToInt(texture(textureUnitPS7, intBitsToFloat(R5i.xy)).xyz);
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R1i.z)) + intBitsToFloat(R0i.w)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R1i.y)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R1i.z)) + intBitsToFloat(R0i.x)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R1i.z)) + intBitsToFloat(R0i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(R4i.y)));
// 1
backupReg0i = R2i.z;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R5i.z)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R6i.y)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.x)));
PS1i = R2i.z;
// 2
R126i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.y)),intBitsToFloat(R3i.z)) + intBitsToFloat(PV1i.y)));
PV0i.x = R126i.x;
R126i.y = ((R5i.w == 0)?(0x40000000):(0));
PV0i.y = R126i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.y)),intBitsToFloat(R3i.y)) + intBitsToFloat(PV1i.w)));
PV0i.z = R126i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(R8i.x)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R8i.z)));
PS0i = R125i.y;
// 3
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].x),-(intBitsToFloat(uf_remappedPS[2].y))) + intBitsToFloat(uf_remappedPS[1].x)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R5i.z)),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.y)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(R8i.y)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.y)));
PS1i = R124i.z;
// 4
backupReg0i = R126i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.z),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.y),intBitsToFloat(backupReg0i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = tempi.x;
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R126i.y)));
PS0i = R125i.w;
// 5
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg1i = R127i.w;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R127i.z)) + intBitsToFloat(R125i.x))/2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(R9i.z) * intBitsToFloat(0x427f0000));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg1i)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R125i.y)));
PS1i = R126i.w;
// 6
R125i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.z)),intBitsToFloat(R125i.w)) + intBitsToFloat(R125i.z))/2.0);
R125i.y = uf_remappedPS[3].z;
R125i.z = 0x3c808081;
R125i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
R125i.w = floatBitsToInt(intBitsToFloat(R125i.w) * 4.0);
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), intBitsToFloat(PV1i.z)));
PS0i = R9i.x;
// 7
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R10i.x)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), intBitsToFloat(R127i.w)));
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(R126i.w)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.z)),intBitsToFloat(R124i.z)) + intBitsToFloat(R2i.z))/2.0);
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R10i.y)));
PS1i = R2i.y;
// 8
R10i.x = R125i.z;
R10i.y = R125i.y;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R10i.z)));
R10i.w = 0x3f800000;
R1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + 0.5);
PS0i = R1i.x;
// 9
R1i.y = floatBitsToInt(intBitsToFloat(R125i.x) + 0.5);
R1i.z = floatBitsToInt(intBitsToFloat(R127i.w) + 0.5);
R9i.w = 0x3f800000;
R2i.w = 0x3b808081;
PS1i = R2i.w;
// 10
R1i.w = floatBitsToInt((intBitsToFloat(R125i.w) * intBitsToFloat(0x3b808081) + intBitsToFloat(0x3b808081)));
// 11
R6i.xyz = ivec3(R9i.x,R9i.y,R9i.z);
R6i.w = R9i.w;
// 12
R5i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R5i.w = R1i.w;
// 13
R4i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R4i.w = R2i.w;
// 14
R3i.xyz = ivec3(R10i.x,R10i.y,R10i.z);
R3i.w = R10i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor1 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
passPixelColor3 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.w));
passPixelColor5 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));

/* check if we want to change a color */
if ($Red != 256 || $Green != 256 || $Blue != 256)
{
	/* Normalize RGB (255,255,255) => RGB (1,1,1) system */
	float rred = $Red / 255.0f;
	float ggreen = $Green / 255.0f;
	float bblue = $Blue / 255.0f;

	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	float luma = dot(passPixelColor1.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor1 = vec4(luma*rred, luma*ggreen, luma*bblue, R4i.w*$Bright);
	
	/* Create Greyscale luma with magic numbers approximating the eyes sensitivities */
	luma = dot(passPixelColor5.rgb, vec3(0.2126, 0.7152, 0.0722));

	/* Adjust brightness of greyscale */
	luma = luma*$Bright;

	/* Colorize and Export */
	passPixelColor5 = vec4(luma*rred, luma*ggreen, luma*bblue, R6i.w*$Bright);
}
else
{
/* only changing brightness */
	passPixelColor1 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w))*$Bright;
	passPixelColor5 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w))*$Bright;
}

}
